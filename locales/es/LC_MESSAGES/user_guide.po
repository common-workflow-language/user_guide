# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, CWL Project Team
# This file is distributed under the same license as the Common Workflow
# Language User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Common Workflow Language User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-25 16:53+0100\n"
"PO-Revision-Date: 2023-01-25 13:37+0000\n"
"Last-Translator: Michael Crusoe <mrc@commonwl.org>\n"
"Language: es\n"
"Language-Team: Spanish <https://hosted.weblate.org/projects/commonwl/cwl-"
"user-guide-license/es/>\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../LICENSE.rst:2 dcdc2e8da0ec4d9e9453601fdd83bac5
msgid "Licenses"
msgstr ""
"Licencias"

#: ../../LICENSE.rst:5 3e165520ca56481b8f8d494a8d471de3
msgid "Instructional Material"
msgstr ""
"Material didáctico"

#: ../../LICENSE.rst:7 f2219cfc916b407fb5b97e7d39a891ee
msgid "All Common Workflow Language project instructional material and changes to the structure are also made available under the `Creative Commons Attribution license <cc-by-human_>`_. The following is a human-readable summary of (and not a substitute for) the `full legal text of the CC BY 4.0 license <cc-by-legal_>`_."
msgstr ""
"Todo el material instructivo del proyecto Common Workflow Language y los "
"cambios en la estructura también están disponibles bajo la `licencia "
"Creative Commons Attribution <cc-by-human_>`_. Lo que sigue es un resumen "
"legible por humanos (y no un sustituto) del `texto legal completo de la "
"licencia CC BY 4.0 <cc-by-legal_>`_."

#: ../../LICENSE.rst:12 b7a7a0fb40344fe087c1cc3ec19308aa
msgid "You are free:"
msgstr "Usted es libre de:"

#: ../../LICENSE.rst:14 02fe5f2d7df143c69637b2908baf0715
msgid "to **Share**—copy and redistribute the material in any medium or format"
msgstr ""
"**Compartir**—copiar y redistribuir el material en cualquier medio o "
"formato"

#: ../../LICENSE.rst:16 bd323b7141664c86a5bae059c81554b4
msgid "to **Adapt**—remix, transform, and build upon the material"
msgstr "**Adaptar**—remezclar, transformar y construir a partir del material"

#: ../../LICENSE.rst:18 430ff4de74924bc3a3b2c7e809ea4456
msgid "for any purpose, even commercially."
msgstr "para cualquier propósito, incluso comercialmente."

#: ../../LICENSE.rst:20 2173e2af49be41ee97a74c4e879faf25
msgid "The licensor cannot revoke these freedoms as long as you follow the license terms:"
msgstr ""
"La licenciante no puede revocar estas libertades en tanto usted siga los "
"términos de la licencia."

#: ../../LICENSE.rst:23 42184243a01f4469943adff1ad982c74
msgid "**Attribution**—You must give appropriate credit (mentioning that your work is derived from work that is Copyright © the Common Workflow Language project, and, where practical, linking to https://www.commonwl.org/ ), provide a `link to the license <cc-by-human_>`_, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use."
msgstr ""
"Atribución — Usted debe dar crédito de manera adecuada(mencionando que su"
" trabajo se deriva de un trabajo que tiene «Copyright © The Common "
"Workflow Language Project» y, cuando sea práctico, con un enlace a "
"https://www.commonwl.org/ ), brindar un `enlace a la licencia <cc-by-"
"human_>`_, e indicar si se han realizado cambios. Puede hacerlo en cualquier"
" forma razonable, pero no de forma tal que sugiera que usted o su uso "
"tienen el apoyo de la licenciante."

#: ../../LICENSE.rst:31 5410799d7abc41e396e9a12e528fcc37
msgid "**No additional restrictions**—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. With the understanding that:"
msgstr ""
"**No hay restricciones adicionales**---No puede aplicar términos legales "
"ni medidas tecnológicas que restrinjan legalmente a otras a hacer "
"cualquier uso permitido por la licencia.   Con el entendimiento de que:"

#: ../../LICENSE.rst:35 f6aae4a5cd0547118c8a3240ca2b4be6
msgid "You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limit
msgstr ""
"No tiene que cumplir con la licencia para elementos del materiale en el "
"dominio público o cuando su uso esté permitido por una excepción o "
"limitación aplicable."

#: ../../LICENSE.rst:38 a40c173be35b4c1b92e83f42bfe2382c
msgid "No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material."
msgstr ""
"No se dan garantías. La licencia podría no darle todos los permisos que "
"necesita para el uso que tenga previsto. Por ejemplo, otros derechos como"
" publicidad, privacidad, o derechos morales pueden limitar la forma en "
"que utilice el material."

#: ../../LICENSE.rst:44 3d7ca3f2cede4d5f998bf014bd970748
msgid "Software"
msgstr "Software"

#: ../../LICENSE.rst:46 72e0760cc40942c7957ec6dadd5d4ed2
msgid "Except where otherwise noted, the example programs and other software provided by Common Workflow Language project are made available under the `OSI`_-approved `Apache 2.0 license <Apache-2.0_>`_."
msgstr ""
"Excepto cuando se indique lo contrario, los programas de ejemplo y otro "
"software proporcionado por el proyecto Common Workflow Language están "
"disponibles bajo la `licencia Apache 2.0 <Apache-2.0_>`_ aprobada "
"por la `OSI`_."

#: ../../LICENSE.rst:50 4ee4d68b90fe422880da856cd539b982
msgid "Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
msgstr ""

#: ../../src/_includes/what-is-cwl.md:1 ../../src/_includes/what-is-cwl.md:2
#: 5ad4be9b62d54c95a913795b514676fd bdd540403a5746ff99edf2dcad0e3122
#: dfc7702e073140c985cf47272a20214d
msgid ""
"CWL is a way to describe command-line tools and connect them together to "
"create workflows. Because CWL is a specification and not a specific piece"
" of software, tools and workflows described using CWL are portable across"
" a variety of platforms that support the CWL standard."
msgstr ""

#: ../../src/episodes.md:5 ../../src/setup.md:5
#: 810c4e8dd79247d6a6fd51a8f65d3975 f1b89ae4325343f783bce8b7c9971047
msgid "This page has moved"
msgstr ""

#: ../../src/episodes.md:9 3060770b3bef41d7bcfcdfb413d7689c
msgid ""
"This page is out-of-date and was kept here to preserve the links of the "
"old User Guide. Please use the new [Table of Contents](index.md#table-of-"
"contents) to browse the User Guide."
msgstr ""

#: ../../src/faq.md:1 48bb9f628b344ba1a3b67ae1cb264e3c
msgid "FAQ"
msgstr ""

#: ../../src/faq.md:11 7e3684e9672643738846756e1ebafd18
msgid "Non \"`File`\" Types Using `evalFrom`"
msgstr ""

#: ../../src/faq.md:41 187ceabb7fd9480bb8cf0f2da47f65ef
msgid "Rename an Input File"
msgstr ""

#: ../../src/faq.md:43 b548b76bcc85420a9b30792386105139
msgid ""
"This example demonstrates how to change the name of an input file as part"
" of a tool description. This could be useful when you are taking files "
"produced from another step in a workflow, and don't want to work with the"
" default names that these files were given when they were created."
msgstr ""

#: ../../src/faq.md:59 9ce692b78ead47e4b0f8cdae8837d35b
msgid "Rename an Output File"
msgstr ""

#: ../../src/faq.md:61 6df1201c159343da9e7515379980d6a0
msgid ""
"This example demonstrates how to change the name of an output file from "
"the default name given to it by a tool:"
msgstr ""

#: ../../src/faq.md:82 f9ab1d0dc1c842b6abb5385268c1d3bd
msgid "Referencing a Local Script"
msgstr ""

#: ../../src/faq.md:84 9f6a84ab6a9343b6ad7db826f8964362
msgid "There are two ways to reference a local script:"
msgstr ""

#: ../../src/faq.md:86 fa50e4fa990b42d1ba4c0f4ae1e5caa1
msgid ""
"The first method involves adding the folder containing your scripts to "
"the `PATH` environment variable. This allows you to run the shell script "
"directly without using `sh` or `bash` commands."
msgstr ""

#: ../../src/faq.md:89 3a871012fcfd4f3ebeca0cb86ec93435
msgid "Start with adding a _shebang_ at the top of your file:"
msgstr ""

#: ../../src/faq.md:95 d954edfff2584288ac8c600733070d2e
msgid ""
"After that, make the script executable with the command `chmod +x "
"scriptname.sh`"
msgstr ""

#: ../../src/faq.md:97 af6b1e37d6be4450a761854480ec9aab
msgid ""
"Finally, modify your `PATH` to add the directory where your script is "
"located. (It is good practice to use `$HOME/bin` for storing your own "
"scripts)."
msgstr ""

#: ../../src/faq.md:104 31f4a2d43062493ca64c648f80afc8e9
msgid "Now you can use `baseCommand: scriptname.sh` to run the script directly."
msgstr ""

#: ../../src/faq.md:113 41c54e71b6cd4f63b2a619a515240d34
msgid ""
"When you wish to share your work later, you can place your script in a "
"software container in the Docker format."
msgstr ""

#: ../../src/faq.md:115 8edc3541ad134ab5a1d23c724f1f0a4e
msgid ""
"The second method involves including an input of `type: File` in the "
"script itself:"
msgstr ""

#: ../../src/faq.md:135 ac0ea81eba8842a18801ab03cbf80a57
msgid "In CWL, everything must be directly stated."
msgstr ""

#: ../../src/faq.md:138 52be1a5640234feabe958ff7ade33653
msgid "Setting `self`-based Input Bindings for Optional Inputs"
msgstr ""

#: ../../src/faq.md:140 c6db734d5aef4f4f99676bdebf9c83c9
msgid ""
"Currently, `cwltool` can't cope with missing optional inputs if their "
"input binding makes use of `self`. Below is an example workaround for "
"this, pending a more sophisticated fix."
msgstr ""

#: ../../src/faq.md:165 a9f7b47c0dd741739795da39bf114879
msgid "Model a \"one-or-the-other\" Parameter"
msgstr ""

#: ../../src/faq.md:167 e3fdd9228b924905a4a1f4b2b7ad7159
msgid ""
"Below is an example showing how to specify different strings to be added "
"to a command line, based on the value given to a Boolean parameter."
msgstr ""

#: ../../src/faq.md:188 3f7cda1437cc48f18745a827ebb74582
msgid "Connect a Solo Value to an Input that Expects an Array of that Type"
msgstr ""

#: ../../src/faq.md:190 5aeaba2cae64442e816bbd458aee833a
msgid ""
"Using "
"[`MultipleInputFeatureRequirement`](https://www.commonwl.org/v1.0/Workflow.html#MultipleInputFeatureRequirement)"
" along with [`linkMerge: "
"merge_nested`](https://www.commonwl.org/v1.0/Workflow.html#WorkflowStepInput)"
msgstr ""

#: ../../src/faq.md:194 5af827a402834978addd82c70be6b5ab
msgid "merge_nested"
msgstr ""

#: ../../src/faq.md:196 6d69e42bd8e443c4b19d80807c7efd6b
msgid ""
"The input must be an array consisting of exactly one entry for each input"
" link. If \"merge_nested\" is specified with a single link, the value "
"from the link must be wrapped in a single-item list."
msgstr ""

#: ../../src/faq.md:199 404640397b6e40c2a2cd5cf85ab3b1c0
msgid "Which means \"create a list with exactly these sources as elements\""
msgstr ""

#: ../../src/faq.md:201 1682c2486e224770b62269709a8663cf
msgid ""
"Or in other words: if the destination is of type `File[]` (an array of "
"`File`s) and the source is a single `File` then add "
"`MultipleInputFeatureRequirement` to the Workflow level `requirements` "
"and add `linkMerge: merge_nested` under the appropriate `in` entry of the"
" destination step."
msgstr ""

#: ../../src/faq.md:229 9078fc009bc145808813c9cc2b734b58
msgid "Optional Inputs 💯"
msgstr ""

#: ../../src/faq.md:231 d4b5a54a400c409cb7984428f6a03ec8
msgid ""
"To make an input parameter optional, add a question mark to the type "
"declaration."
msgstr ""

#: ../../src/faq.md:247 9e8dbee6e8f84d08b1a54fffa06394ef
msgid "<a name=\"enuminputs\"></a>"
msgstr ""

#: ../../src/faq.md:248 1d846bfb5f054d09a4afad1da8e4b642
msgid "Enum Inputs ⚜️"
msgstr ""

#: ../../src/faq.md:250 2d0e95fec8084787b734388d60188574
msgid ""
"For command line flags that require a specific input as the argument an "
"enum type can be declared in CWL. **Specifying null here is known as long"
" form style. It does the same thing as the question mark on the other "
"inputs.**"
msgstr ""

#: ../../src/faq.md:267 eccc4a364330470fa474dcaaa3433390
msgid "<a name=\"recordinputs\"></a>"
msgstr ""

#: ../../src/faq.md:268 e945f6a337af4e4686bed482a4fe6c39
msgid "Record Inputs 📀"
msgstr ""

#: ../../src/faq.md:270 8a3efaa0ad1548428bcfd6e01d135cdc
msgid ""
"For commandline flags that are either **mutually exclusive** or "
"**dependent** a special record type can be defined. You can also specify "
"null here to create optional inputs."
msgstr ""

#: ../../src/faq.md:322 cdab644adc5643708870fb08c06cbfca
msgid "Setting Mutually Exclusive Parameters"
msgstr ""

#: ../../src/faq.md:324 089a5a0b076b44aeaab4d69ee3c79f97
msgid ""
"To properly set fields in a record input type, you need to pass a "
"dictionary to the input to properly set the parameters. This is done by "
"using inline JavaScript and returning the dictionary with the key of the "
"field you want to set. The source field is set to indicate the input from"
" the workflow to be used as the value."
msgstr ""

#: ../../src/faq.md:342 561172559c6f41a68819608fd9e58bb0
msgid "Setting Booleans"
msgstr ""

#: ../../src/faq.md:344 c5ee4946d2e840abaa3dc796a62652c7
msgid "These can be set by using the default field"
msgstr ""

#: ../../src/faq.md:349 4f2069a2113c414db18eca95550e9e09
msgid "Concatenating Strings in Inputs"
msgstr ""

#: ../../src/faq.md:351 31f3390e6771414ba7bf57c044c4b0c4
msgid "The valueFrom field must be used instead of default."
msgstr ""

#: ../../src/faq.md:359 3b77ce4930ae46d5be9f6965e8c54727
msgid "`cwltool` Errors due to Filenames with Space Characters Inside"
msgstr ""

#: ../../src/faq.md:361 06f36bbe4d3840229b7374f27b86ae80
msgid "`cwltool` does not allow some characters in filenames by default."
msgstr ""

#: ../../src/faq.md:363 3cb2f70d00274a4dafd972ccd8c519c2
msgid ""
"For example, the filename `a space is here.txt` includes 3 space "
"characters."
msgstr ""

#: ../../src/faq.md:371 093a1529262043ef84a99675054938e0
msgid ""
"If you can not avoid these dangerous characters, then pass `--relax-path-"
"checks` to `cwltool`."
msgstr ""

#: ../../src/faq.md:373 45b6d9acbfaa47e5984184f7da554d0a
msgid "CWL Parameter Reference Error due to Hyphen in Input Identifier"
msgstr ""

#: ../../src/faq.md:375 5705c9bacca5405ca6f14315a5575db8
msgid "If `cwltool --validate` returns valid"
msgstr ""

#: ../../src/faq.md:384 82bfc285b59a439ca97d3278997f0fce
msgid "But executing it causes an error like:"
msgstr ""

#: ../../src/faq.md:396 181d5130101d45ccb22aebae3d154c2f
msgid "The file is here"
msgstr ""

#: ../../src/faq.md:410 e864390b5ddb423aaa10e9d33d257dc1
msgid "Problem caused by `-` (hyphen character)."
msgstr ""

#: ../../src/faq.md:423 fe637c32fb15427a9045679b5da42ec5
msgid "To fix this error, change `-` (hyphen) to `_` (underscore)"
msgstr ""

#: ../../src/faq.md:436 1f8004b9df8547029d82e57f9abdc979
msgid ""
"If it is not possible to change the input identifier, then you can use an"
" alternative CWL Parameter Reference syntax:"
msgstr ""

#: ../../src/faq.md:442 70990dc5a0034099921ceb89c89e2dcc
msgid "Use CWL and cwltool with Singularity"
msgstr ""

#: ../../src/faq.md:445 f679e26f18d9455f945fd13361a9c906
msgid ""
"The CWL standards are built around (optional) Docker format containers. "
"The reference runner and several other CWL implementations support "
"running those Docker format containers using the Singularity engine. "
"Directly specifying a Singularity format container is not part of the CWL"
" standards."
msgstr ""

#: ../../src/faq.md:450 fcd0273dbdd84e728cfd8fbe239f2a01
msgid "Debug JavaScript Expressions"
msgstr ""

#: ../../src/faq.md:452 173ddbd1e7c64927a8dcb12a2a2140f8
msgid ""
"You can use the <code>--js-console</code> option of <code>cwltool</code>,"
" or you can try creating a JavaScript or TypeScript project for your "
"code, and load it using <code>expressionLib</code>, e.g.: <a "
"href=\"https://github.com/common-workflow-language/common-workflow-"
"language/blob/master/v1.0/v1.0/template-tool.cwl#L6-L8\"> "
"https://github.com/common-workflow-language/common-workflow-"
"language/blob/master/v1.0/v1.0/template-tool.cwl#L6-L8</a></dd>"
msgstr ""

#: ../../src/index.md:1 662fe273e2fb4042b688512955e450a1
msgid "Common Workflow Language User Guide"
msgstr ""

#: ../../src/index.md:3 a15b52205f0145feaac298510e4d678a
msgid ""
"This guide will introduce you to writing workflows using the [Common "
"Workflow Language](https://www.commonwl.org/) (CWL) open standards. This "
"guide describes the latest specification {{ cwl_version }}."
msgstr ""

#: ../../src/index.md:7 512aa0c7166b429e8116f71eef007f79
msgid "Contributions and Feedback are Welcome!"
msgstr ""

#: ../../src/index.md:9 b1b19e17a18540939cb3bb7f8a700cab
msgid ""
"If you find that something is missing from this guide, or if you would "
"like to provide other feedback, file an Issue on the [project repository "
"for this guide][repo]. You can also suggest changes directly in a Pull "
"Request by clicking the \"Edit this page\" button at the right sidebar of"
" each page."
msgstr ""

#: ../../src/index.md:16 d58b36ac43ac44139897be752fbb1f87
msgid "Navigating the User Guide"
msgstr ""

#: ../../src/index.md:18 6726cf3585a646a8b4cbeb543cf84a38
msgid ""
"If you are a beginner user get started with the "
"[Introduction](/introduction/index.md) section. For advanced users the "
"subsections of the [Topics](/topics/index.md) have detailed information "
"about the most common topics for CWL."
msgstr ""

#: ../../src/index.md:23 2e504aa7c46a426fa959e7254e9a84a5
msgid ""
"The Table of Contents is displayed at the top menu and also on the left "
"sidebar. It also appears further down this page but with links to "
"subsections. The right sidebar contains links to the sections of each "
"page, and the Search form is on the left sidebar."
msgstr ""

#: ../../src/index.md:28 e7be0df0838b432d9c7f296d777f120b
msgid "Table of Contents"
msgstr ""

#: ../../src/introduction/basic-concepts.md:1 173e0816db20432c8d9dba1de5393dee
msgid "Basic Concepts"
msgstr ""

#: ../../src/introduction/basic-concepts.md:3 30eacc583f6841719e2142d283811d97
msgid ""
"This section describes the basic concepts for users to get started on "
"working with Common Workflow Language (CWL) workflows. Readers are "
"expected to be familiar with workflow managers, YAML, and comfortable "
"with following instructions for the command-line. The other sections of "
"the user guide cover the same concepts, but in more detail. If you are "
"already familiar with CWL or you are looking for more advanced content, "
"you may want to skip this section."
msgstr ""

#: ../../src/introduction/basic-concepts.md:10 791b8f38a14147bbaa174c7eb595f17e
msgid "The CWL Specification"
msgstr ""

#: ../../src/introduction/basic-concepts.md:21 1a3989dcbb9844b39d84bf6df6b352ed
msgid ""
"The CWL specification is a document written and maintained by the CWL "
"community. The specification has different versions. The version covered "
"in this user guide is the {{ cwl_version }}."
msgstr ""

#: ../../src/introduction/basic-concepts.md:25 db1bbc6e980f404f9f3fcd08e92ee9a3
msgid ""
"The specification version can have up to three numbers separated by `.`s "
"(dots). The first number is the major release, used for backward-"
"incompatible changes like the removal of deprecated features. The second "
"number is the minor release, used for new features or smaller changes "
"that are backward-compatible. The last number is used for bug fixes, like"
" typos and other corrections to the specification."
msgstr ""

#: ../../src/introduction/basic-concepts.md:33 acc7887c65974114996f700a38a7eccc
msgid ""
"The model used for the specification version is called Semantic "
"Versioning. See the end of this section to [learn more](#learn-more) "
"about it."
msgstr ""

#: ../../src/introduction/basic-concepts.md:37 d2476d9bcff44f21b8d84a3a0d87a246
msgid "Implementations"
msgstr ""

#: ../../src/introduction/basic-concepts.md:39 f86415e4d78e48c4a8a76ced81221b98
msgid ""
"An implementation of the CWL specification is any software written "
"following what is defined in a version of the specification document. "
"However, implementations may not implement every aspect of the "
"specification. CWL implementations are licensed under both Open Source "
"and commercial licenses."
msgstr ""

#: ../../src/introduction/basic-concepts.md:44 c5524d73708c4c779980528864506fd4
msgid ""
"CWL is well suited for describing large-scale workflows in cluster, cloud"
" and high performance computing environments where tasks are scheduled in"
" parallel across many nodes."
msgstr ""

#: ../../src/introduction/basic-concepts.md:51 ac46a9f8850a434bac5bc2b41ee6294e
msgid "CWL specification, implementations, and other tools."
msgstr ""

#: ../../src/introduction/basic-concepts.md:105
#: 9bba7c4f783942e4a299603430601363
msgid "Processes and Requirements"
msgstr ""

#: ../../src/introduction/basic-concepts.md:107
#: e2140e0f0e7747ef8383887c20a7945a
msgid ""
"A process is a computing unit that takes inputs and produces outputs. The"
" behavior of a process can be affected by the inputs, requirements, and "
"hints. There are four types of processes defined in the CWL specification"
" {{ cwl_version }}:"
msgstr ""

#: ../../src/introduction/basic-concepts.md:112
#: 15bf490724cd46dcbcfab44633c5a9a2
msgid "A command-line tool."
msgstr ""

#: ../../src/introduction/basic-concepts.md:113
#: 51d52d051e654a8395239f88df7c9d8c
msgid "An expression tool."
msgstr ""

#: ../../src/introduction/basic-concepts.md:114
#: eb496cc818524fa7bae5a22ddd00a19c
msgid "An operation."
msgstr ""

#: ../../src/introduction/basic-concepts.md:115
#: c4a22d12e7f149ff901d27de32b9361d
msgid "A workflow."
msgstr ""

#: ../../src/introduction/basic-concepts.md:118
#: 7618de899a7043989d77baacf62eb7b2
msgid "The processing units available in the CWL objects model."
msgstr ""

#: ../../src/introduction/basic-concepts.md:119
#: 6f1544a220664b79b04bf008058b5a91
msgid ""
"A command-line tool is a wrapper for a command-line utility like `echo`, "
"`ls`, and `tar`. A command-line tool can be called from a workflow."
msgstr ""

#: ../../src/introduction/basic-concepts.md:122
#: fbd14ac9a2f541478a320ed4cbc69e13
msgid ""
"An expression tool is a wrapper for a JavaScript expression. It can be "
"used to simplify workflows and command-line tools, moving common parts of"
" a workflow execution into reusable JavaScript code that takes inputs and"
" produces outputs like a command-line tool."
msgstr ""

#: ../../src/introduction/basic-concepts.md:127
#: da4dba50d25d4533b3dbb92f54d32a30
msgid ""
"Operation is an abstract process that also takes inputs, produces "
"outputs, and can be used in a workflow. But it is a special operation not"
" so commonly used. It is discussed in the [Operations "
"section](../topics/operations.md) of this user guide."
msgstr ""

#: ../../src/introduction/basic-concepts.md:131
#: ce11c9f8d65c4268984d0384d95144cc
msgid ""
"The workflow is a process that contains steps. Steps can be other "
"workflows (nested workflows), command-line tools, or expression tools. "
"The inputs of a workflow can be passed to any of its steps, while the "
"outputs produced by its steps can be used in the final output of the "
"workflow."
msgstr ""

#: ../../src/introduction/basic-concepts.md:137
#: 3a201aa497e84f70855bb2251e7e3281
msgid ""
"The CWL specification allows for implementations to provide extra "
"functionality and specify prerequisites to workflows through "
"*requirements*. There are many requirements defined in the CWL "
"specification, for instance:"
msgstr ""

#: ../../src/introduction/basic-concepts.md:141
#: b78f7fa2be1c4bb090f6da895457ad1e
msgid "`InlineJavascriptWorkflow` - enables JavaScript in expressions."
msgstr ""

#: ../../src/introduction/basic-concepts.md:142
#: f7e95d264ffa4e2db0864faccd9e5a0e
msgid "`SubworkflowFeatureRequirement` - enables nested workflows."
msgstr ""

#: ../../src/introduction/basic-concepts.md:143
#: 3f1e5b01e49a4dc1b1c99936a4589afc
msgid ""
"`InitialWorkDirRequirement` - controls staging files in the input "
"directory."
msgstr ""

#: ../../src/introduction/basic-concepts.md:145
#: 03c3048f38ae4938a484cf02001877b3
msgid ""
"Some CWL runners may provide requirements that are not in the "
"specification. For example, GPU requirements are supported in `cwltool` "
"through the `cwltool:CUDARequirement` requirement, but it is not part of "
"the {{ cwl_version }} specification and may not be supported by other CWL"
" runners."
msgstr ""

#: ../../src/introduction/basic-concepts.md:151
#: f9715b5ec65c405c849bb030c1927060
msgid ""
"Hints are similar to requirements, but while requirements list features "
"that are required, hints list optional features. Requirements are "
"explained in detail in the [Requirements](../topics/requirements-and-"
"hints.md) section."
msgstr ""

#: ../../src/introduction/basic-concepts.md:155
#: 442662f50e9e4620970ce32b1b127969
msgid "FAIR Workflows"
msgstr ""

#: ../../src/introduction/basic-concepts.md:157
#: 2b34c786af3840e88f29d214e19dc837
msgid ""
"The FAIR principles have laid a foundation for sharing and publishing "
"digital assets, and in particular, data. The FAIR principles emphasize "
"machine accessibility and that all digital assets should be Findable, "
"Accessible, Interoperable, and Reusable. Workflows encode the methods by "
"which the scientific process is conducted and via which data are created."
" It is thus important that workflows support the creation of FAIR data "
"and adhere to the FAIR principles. — [FAIR Computational "
"Workflows](https://workflows.community/groups/fair/), Workflows Community"
" Initiative."
msgstr ""

#: ../../src/introduction/basic-concepts.md:167
#: dd6aadff8cf54ce78ea6b317afbaddb0
msgid ""
"CWL has roots in \"make\" and many similar tools that determine order of "
"execution, based on dependencies between tasks. However, unlike \"make\","
" CWL tasks are isolated, and you must be explicit about your inputs and "
"outputs."
msgstr ""

#: ../../src/introduction/basic-concepts.md:171
#: fe7f1f0b28434f8aaf0f6ac6589a83f0
msgid ""
"The benefit of explicitness and isolation are flexibility, portability, "
"and scalability; tools and workflows described with CWL can transparently"
" leverage technologies such as Docker and be used with CWL "
"implementations from different vendors."
msgstr ""

#: ../../src/introduction/basic-concepts.md:176
#: d10cf45b3c7f49dc98bc0e5d1246f224
msgid "`cwltool` also uses the PROV-O standard ontology for data provenance."
msgstr ""

#: ../../src/introduction/basic-concepts.md:178
#: ../../src/introduction/prerequisites.md:196
#: ../../src/introduction/quick-start.md:94 332b6e8b831e4bc5aed3745938230a57
#: ce7fc63b808d4499b9bf9828c2dafe35 ebf339ed376a4d3b89b15b4d5afe593b
msgid "Learn More"
msgstr ""

#: ../../src/introduction/basic-concepts.md:180
#: 8badec9987ba40609cf1f626172b2b2d
msgid "Semantic Versioning - <https://semver.org/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:181
#: c75a8b4bf0e24781bf6713cf6f013cd1
msgid ""
"The CWL Specification page in the CWL website: "
"<https://www.commonwl.org/specification/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:182
#: 79b146ffe6d74e1b8f6019251dc4b7c2
msgid ""
"The current CWL specification on GitHub: {{ '<https://github.com/common-"
"workflow-language/cwl-{}>'.format(cwl_version_text) }}"
msgstr ""

#: ../../src/introduction/basic-concepts.md:183
#: 07cca9a33d8f4b77ac6ad35ca8b95655
msgid ""
"The list of Implementations in the CWL website: "
"<https://www.commonwl.org/implementations/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:184
#: 31db11c8ddf2423192a8b2063b3e91c2
msgid "PROV-O: The PROV Ontology - <https://www.w3.org/TR/prov-o/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:185
#: d81dd96143ea444aa78ff45cfa0584b3
msgid ""
"CWL Operations are covered in the [Operations](../topics/operations.md) "
"section of this user guide."
msgstr ""

#: ../../src/introduction/index.md:1 c54984605872472190ae7771809a20db
msgid "Introduction"
msgstr ""

#: ../../src/introduction/index.md:3 01a237b8ec2f46c9acd31d142591ce75
msgid ""
"This section will guide you through a short introduction to CWL, the "
"prerequisites for following this user guide, and some basic concepts that"
" are useful to know before reading the rest of the user guide."
msgstr ""

#: ../../src/introduction/prerequisites.md:1 3fb9888b666945eab1e3ff109646c574
msgid "Prerequisites"
msgstr ""

#: ../../src/introduction/prerequisites.md:6 5fb0486762354f93853fff209f835c08
msgid ""
"The software and configurations listed in this section are prerequisites "
"for following this user guide. The CWL standards are implemented by many "
"different workflow runners and platforms. This list of requirements "
"focuses on the CWL reference runner, `cwltool`. You can use another CWL-"
"compatible runner or workflow system, but the results and interface may "
"look different (though the exact workflow outputs should be identical)."
msgstr ""

#: ../../src/introduction/prerequisites.md:12 5f1e7a608e0b455196d191c845a5c98e
msgid "CWL Implementations"
msgstr ""

#: ../../src/introduction/prerequisites.md:14 7ba4b5c51be24f5392949d06ee42e018
msgid ""
"There are many implementations of the CWL standards. Some are complete "
"CWL runners, while others could be plug-ins or extensions to workflow "
"engines. We have a better explanation in the [Implementations](basic-"
"concepts.md#implementations) section."
msgstr ""

#: ../../src/introduction/prerequisites.md:19 e2d3e6dd13b14d819a504c35da6fe8e7
msgid "Operating System"
msgstr ""

#: ../../src/introduction/prerequisites.md:21 91251d1f0efb4d4cb083b4517ff3107a
msgid ""
"We recommend using an up-to-date operating system. You can choose any of "
"the following options for your operating system:"
msgstr ""

#: ../../src/introduction/prerequisites.md:24 6ad263e267514c5fb05794d3d76d418d
msgid "Linux"
msgstr ""

#: ../../src/introduction/prerequisites.md:25 8a3bfd72dccf4a8c874a96aebcbe5cb7
msgid "macOS"
msgstr ""

#: ../../src/introduction/prerequisites.md:26 5195706d9c6c4573aff135fd539759a2
msgid "Windows"
msgstr ""

#: ../../src/introduction/prerequisites.md:29 9c4506915e4c40599527bc1d2b18645b
msgid ""
"If you are using Windows, you will have to install the [Windows Subsystem"
" for Linux 2](https://learn.microsoft.com/en-us/windows/wsl/install) "
"(WSL2). Visit the `cwltool` [documentation](https://github.com/common-"
"workflow-language/cwltool/blob/main/README.rst#ms-windows-users) for "
"details on installing WSL2. Your operating system also needs internet "
"access and a recent version of Python (3.6+)."
msgstr ""

#: ../../src/introduction/prerequisites.md:35 37d9eb784ec1425786158f98e3f63890
msgid "CWL Runner"
msgstr ""

#: ../../src/introduction/prerequisites.md:41 572f493a985141a1b92dafbdba92790d
msgid ""
"The first thing you will need for running CWL workflows is a CWL runner. "
"`cwltool` is a Python Open Source project maintained by the CWL "
"community. It is also the CWL reference runner, which means it must "
"support everything in the current CWL specification, {{ cwl_version }}."
msgstr ""

#: ../../src/introduction/prerequisites.md:46 9606d3c4849f4b17b2e55a298210f055
msgid ""
"`cwltool` can be installed with `pip`. We recommend using a virtual "
"environment like `venv` or `conda`. The following commands will create "
"and activate a Python virtual environment using the `venv` module, and "
"install `cwltool` in that environment:"
msgstr ""

#: ../../src/introduction/prerequisites.md:51 754fc59967d94ffa935284676d55ffed
msgid "Installing `cwltool` with `pip` and `venv`."
msgstr ""

#: ../../src/introduction/prerequisites.md:62 2905c6362d4146e8b35bc74744841972
msgid ""
"Visit the `cwltool` [documentation](https://github.com/common-workflow-"
"language/cwltool#install) for other ways to install `cwltool` with `apt` "
"and `conda`."
msgstr ""

#: ../../src/introduction/prerequisites.md:65 091278ece252483a9838fb771de3e04e
msgid "Let's use a simple CWL tool description `true.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/prerequisites.md:67 0928a5c668c3414a945bc9eda147892c
msgid "`true.cwl`"
msgstr ""

#: ../../src/introduction/prerequisites.md:73 56f3c481762848298214a88e559fc0f9
msgid ""
"The `cwltool` command has an option to validate CWL tool and workflow "
"descriptions. This option will parse the CWL document, look for syntax "
"errors, and verify that the workflow descriptions are compliant with the "
"CWL standards. However, these actions will be performed without running "
"the document. To validate CWL workflows (or even a standalone command "
"line tool description like the above) pass the `--validate` option to the"
" `cwltool` command:"
msgstr ""

#: ../../src/introduction/prerequisites.md:79 710c266ab4a5477b84d6ea987420fa20
msgid "Validating `true.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/prerequisites.md:84 cc353db5da2546bb88a77ce1a202ff9d
msgid "You can run the CWL tool description by omitting the `--validate` option:"
msgstr ""

#: ../../src/introduction/prerequisites.md:86 b62df08ec96f4cdb887600079856dd76
msgid "Running `true.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/prerequisites.md:91 97e02557293440d1a58ba659dad21113
msgid "Cwl-runner Python Module"
msgstr ""

#: ../../src/introduction/prerequisites.md:93 0935c3ff01634c75b5c91546dc36c7b9
msgid ""
"`cwl-runner` is an implementation-agnostic alias for any CWL compliant "
"runner. This simply means that the `cwl-runner` alias command can be "
"invoked independently, and is not reliant on a particular CWL runner "
"program name. Users can invoke `cwl-runner` instead of invoking a CWL "
"runner like `cwltool` directly. The `cwl-runner` is installed by a system"
" administrator or user to point to the preferred CWL implementation. This"
" is convenient for environments with multiple CWL runners."
msgstr ""

#: ../../src/introduction/prerequisites.md:101 cfb37fd605164a8d9cc75bf892ce97c0
msgid ""
"The CWL community publishes a Python package with the name `cwlref-"
"runner` that installs an alias for `cwltool` under the name `cwl-runner`"
msgstr ""

#: ../../src/introduction/prerequisites.md:104 5f06a7a6aae343d989a5b30979c600f6
msgid "Installing `cwl-runner` alias for cwltool with `pip`."
msgstr ""

#: ../../src/introduction/prerequisites.md:111 5f956260f3874b6dbeaf3ad7ecc09c9a
msgid ""
"Now you can validate and run your workflow with the `cwl-runner` "
"executable, which will invoke `cwltool`. You should have the same results"
" and output as in the previous section."
msgstr ""

#: ../../src/introduction/prerequisites.md:115 d35e4effec554a638d6c3047ef3fd05f
msgid "Validating `true.cwl` with `cwl-runner`."
msgstr ""

#: ../../src/introduction/prerequisites.md:120 15a1f944a0d642729d3736ed1c907074
msgid "Running `true.cwl` with `cwl-runner`."
msgstr ""

#: ../../src/introduction/prerequisites.md:125 fa34c808bb494ddfa3f3926bc42e650c
msgid ""
"Another way to execute `cwl-runner` is by invoking the file directly. For"
" that, the first thing you need to do is copy `true.cwl` workflow into a "
"new file: `true_shebang.cwl`, and include a special first line, a "
"*shebang*:"
msgstr ""

#: ../../src/introduction/prerequisites.md:129 0c15f62eb7534e809f625f3fa213e92d
msgid "`true_shebang.cwl`"
msgstr ""

#: ../../src/introduction/prerequisites.md:135 d67719a6f0ce4ba1bb6152a10507b729
msgid "Now you can make the file `true_shebang.cwl` executable with `chmod u+x`."
msgstr ""

#: ../../src/introduction/prerequisites.md:137 1c96e75281844bfab0578bab2e816854
msgid "Making `true.cwl` executable."
msgstr ""

#: ../../src/introduction/prerequisites.md:144 bece1fc3c3f842b0b30d8f1b7fbfc200
msgid ""
"And finally, you can execute it directly in the command-line. On "
"execution, the program specified in the shebang (`cwl-runner`) will be "
"used to execute the rest of the file."
msgstr ""

#: ../../src/introduction/prerequisites.md:148 a7caa36b0f83448b91ef2e76e30abc51
msgid "Running `true_shebang.cwl` with a shebang."
msgstr ""

#: ../../src/introduction/prerequisites.md:154 39321e93e9994fcca20b425aa45c2894
msgid ""
"The *shebang* is the two-character sequence `#!` at the beginning of a "
"script. When the script is executable, the operating system will execute "
"the script using the executable specified after the shebang. It is "
"considered a good practice to use `/usr/bin/env <executable>` rather than"
" using a hard-coded location, since `/usr/bin/env <executable>` looks for"
" the `<executable>` program in the system `PATH`,"
msgstr ""

#: ../../src/introduction/prerequisites.md:161 601cf500d76c4e0287af4429a46b36d2
msgid "Text Editor"
msgstr ""

#: ../../src/introduction/prerequisites.md:163 b286d5359e184ef58054c72df4014629
msgid ""
"You can use any text editor with CWL, but for syntax highlighting we "
"recommend an editor with YAML support. Popular editors are Visual Studio "
"Code, Sublime, WebStorm, vim/neovim, and Emacs."
msgstr ""

#: ../../src/introduction/prerequisites.md:167 e14423edd829401faed0950772123240
msgid ""
"There are extensions for Visual Studio Code and WebStorm that provide "
"integration with CWL, and features such as customized syntax highlighting"
" and better auto-complete:"
msgstr ""

#: ../../src/introduction/prerequisites.md:171 889c44360bd54a0e85e7f0e61aa6593c
msgid ""
"Visual Studio Code with the Benten (CWL) plugin - "
"<https://github.com/rabix/benten#install-vs-code-extension>"
msgstr ""

#: ../../src/introduction/prerequisites.md:172 7b9bff73624947ac90a99c7880e2e911
msgid ""
"cwl-plugin for IntelliJ - <https://plugins.jetbrains.com/plugin/10040"
"-cwl-plugin>"
msgstr ""

#: ../../src/introduction/prerequisites.md:174 c5ff687c86ef4ccaae25d8bcfbd5f873
msgid ""
"The CWL community also maintains a list of editors and viewers: "
"<https://www.commonwl.org/tools/#editors>"
msgstr ""

#: ../../src/introduction/prerequisites.md:177 0a610a9632064deb824afd0719429d3a
msgid "Docker"
msgstr ""

#: ../../src/introduction/prerequisites.md:181 ec0c47438a5242cb99dffa7a4997e95a
msgid ""
"`cwltool` uses Docker to run tools, workflows, and workflow steps that "
"specify a software container. Follow the instructions in the Docker "
"documentation to install it for your operating system: "
"<https://docs.docker.com/>."
msgstr ""

#: ../../src/introduction/prerequisites.md:185 aae94ac2114641f186eac0f4117223eb
msgid ""
"You do not need to know how to write and build Docker containers. In the "
"rest of the user guide, we will use existing Docker images for running "
"examples, and to clarify the differences between the execution models "
"with and without containers."
msgstr ""

#: ../../src/introduction/prerequisites.md:191 209e072724ed4d27b37e9bff6d55d811
msgid ""
"`cwltool` supports running containers with Docker, Podman, udocker, and "
"Singularity. You can also use alternative container registries for "
"pulling images."
msgstr ""

#: ../../src/introduction/prerequisites.md:198 3bf47876e3694e6cadb05123326459cb
msgid ""
"The [Implementations](basic-concepts.md#implementations) topic in the "
"next section, Basic Concepts."
msgstr ""

#: ../../src/introduction/prerequisites.md:199 459a65b8e67c4a9aaa03138c1abe94ad
msgid "The Python `venv` module: <https://docs.python.org/3/library/venv.html>"
msgstr ""

#: ../../src/introduction/quick-start.md:1 898eb29ac7714c69840b795633953a05
msgid "Quick Start"
msgstr ""

#: ../../src/introduction/quick-start.md:3 2a658bd2d8ce4533ab7e056fc3a3ffcf
msgid ""
"This section will show you a brief overview of what CWL is, and where you"
" can learn more about it. No previous knowledge of CWL is required, but "
"you must be comfortable following instructions for the command-line."
msgstr ""

#: ../../src/introduction/quick-start.md:7 32dd2e28cf0f40b6930750f0162355eb
msgid "“Hello World”"
msgstr ""

#: ../../src/introduction/quick-start.md:12 471c47d311074ecfac071b6d52d9cfb6
msgid ""
"CWL documents are written in [YAML](../topics/index.md) (and/or JSON). "
"The example below shows a simple CWL “Hello World” workflow annotated "
"with comments. Note that comments start with `#`:"
msgstr ""

#: ../../src/introduction/quick-start.md:16 5078140028ea4d04973cb9cd20f0607e
msgid "`hello_world.cwl`"
msgstr ""

#: ../../src/introduction/quick-start.md:22 ab127d4ba0a44526ab129587a8160923
msgid ""
"The example above is just a wrapper for the `echo` command-line tool. "
"Running the workflow above with the default input values will produce the"
" same result as the command-line `echo \"Hello World\"`."
msgstr ""

#: ../../src/introduction/quick-start.md:27 d5cc6b4295a74f3586f022b0227759b3
msgid ""
"In CWL, there is a distinction between a command-line tool and a "
"workflow. But for the sake of simplicity, we are using the term "
"“workflow” here. You will learn more about this in the [basic concepts"
"](basic-concepts.md) section."
msgstr ""

#: ../../src/introduction/quick-start.md:32 585a4fe583ce44e180a062742b3b0849
msgid "Installing a CWL Runner"
msgstr ""

#: ../../src/introduction/quick-start.md:34 0d81b0c9ea58420789d1d71cca32ce88
msgid ""
"`cwltool` is an implementation of the CWL specification. It is also the "
"CWL *Reference Runner* for the specification, and it is compliant with "
"the latest version of the specification: {{ cwl_version }}. You can "
"install `cwltool` using `pip`:"
msgstr ""

#: ../../src/introduction/quick-start.md:39 ea4ab0782d8049d8b1b89cea4ae60048
msgid "Installing `cwltool` with `pip`."
msgstr ""

#: ../../src/introduction/quick-start.md:47 f6f3b7453a254f828bd4c9e9fef92bed
msgid ""
"If installing the cwltool using the pip command doesn't work for you, the"
" [prerequisites](prerequisites.md) section contains other ways to install"
" `cwltool` and a more detailed list of software and libraries used for "
"following the rest of this user guide."
msgstr ""

#: ../../src/introduction/quick-start.md:51 3bf9050175d4444ebbbabe219412574f
msgid "Running \"Hello World\""
msgstr ""

#: ../../src/introduction/quick-start.md:53 e03f72a14dcf4bf38ce8232598ca761d
msgid ""
"The usage of the `cwltool` command-line executable is basically `cwltool "
"[OPTIONS] <CWL_DOCUMENT> [INPUTS_OBJECT]`. You can run the "
"`hello_world.cwl` workflow without specifying any option:"
msgstr ""

#: ../../src/introduction/quick-start.md:57 3dcfb2facd324dccb3084c02487625dc
msgid "Running `hello_world.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/quick-start.md:62 b8531da183964b02bca19f818ec076d4
msgid ""
"Or you can override the default value of the input parameter `message`, "
"similar to how you would change the argument of the `echo` base command:"
msgstr ""

#: ../../src/introduction/quick-start.md:65 7ba1ddebeb2843179fe99fc410b193c6
msgid "Running `hello_world.cwl` with `cwltool` passing an input parameter."
msgstr ""

#: ../../src/introduction/quick-start.md:70 a6dc303e9d284b60bf1102212505ca27
msgid ""
"Another way of passing values to your workflow input parameters is via an"
" *Inputs Object*. This is a file containing the input fields with their "
"corresponding values. The Inputs Objects file can be written in JSON or "
"YAML. For example:"
msgstr ""

#: ../../src/introduction/quick-start.md:74 59ac7830ae3e4d7cb1bf503e8c90fe30
msgid "`hello_world-job.json`"
msgstr ""

#: ../../src/introduction/quick-start.md:80 6d1d6f42ada2418ba0a1de1371825b9f
msgid ""
"You can use this Inputs Object file now to execute the “Hello World” "
"workflow:"
msgstr ""

#: ../../src/introduction/quick-start.md:82 1cd924fe8ace4a82ad8701f37b5e7d84
msgid "Passing an Inputs Object file to `cwltool`."
msgstr ""

#: ../../src/introduction/quick-start.md:88 aa297c52cd964291a47bb91c0135156b
msgid ""
"We used a similar file name for the workflow and for the Inputs Object "
"files. The *-job.json* suffix is very common in Inputs Object files, but "
"it is not a requirement. You can choose any name for your workflows and "
"Inputs Object files."
msgstr ""

#: ../../src/introduction/quick-start.md:96 28b02c90397745bfbacc03c3b1034939
msgid "Continue reading the next sections of this User Guide!"
msgstr ""

#: ../../src/introduction/quick-start.md:97 ef2a4f39f01049b891868b84d968c0dd
msgid "[List of CWL Implementations](https://www.commonwl.org/implementations)."
msgstr ""

#: ../../src/introduction/quick-start.md:98 89e3fa8dceda4f0cb1cfdfd1f17fe4df
msgid ""
"The [`common-workflow-language` organization](https://github.com/common-"
"workflow-language) at GitHub."
msgstr ""

#: ../../src/introduction/quick-start.md:99 7cd178223ba94d1ab3ee8cc5f13a8dcf
msgid ""
"[Common Workflow Language at "
"Wikipedia](https://en.wikipedia.org/wiki/Common_Workflow_Language)."
msgstr ""

#: ../../src/introduction/quick-start.md:100 46f6f8d050ce4f8c897056167d9707a7
msgid ""
"[YAML.org](http://yaml.org/) and [YAML at "
"Wikipedia](https://en.wikipedia.org/wiki/YAML)."
msgstr ""

#: ../../src/introduction/quick-start.md:101 5ee00ee409b746dc951ca1d4c360e624
msgid ""
"The {{'[CWL Specification "
"VERSION](https://www.commonwl.org/VERSION)'.replace('VERSION', "
"cwl_version_text) }}."
msgstr ""

#: ../../src/introduction/quick-start.md:102 d4af972281174b8999eab55ee0ab1a0e
msgid ""
"[Workflow management system at "
"Wikipedia](https://en.wikipedia.org/wiki/Workflow_management_system)."
msgstr ""

#: ../../src/setup.md:9 80401cfffae042ab9ec4b3754af04b25
msgid ""
"This page is out-of-date and was kept here to preserve the links of the "
"old User Guide. The information on this page has been migrated to the "
"[FAQ](/faq.md) section of the new user guide."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:1
#: 32f86f911ebe4a4c94975f81742333f3
msgid "Additional Arguments and Parameters"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:3
#: d5f1ad2b95ad46d48f8f2ca5e357bb5d
msgid ""
"Sometimes tools require additional command line options that don't "
"correspond exactly to input parameters."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:6
#: c53ceee943ad4acea779e072b9137889
msgid ""
"In this example, we will wrap the Java compiler to compile a java source "
"file to a class file.  By default, \"javac\" will create the class files "
"in the same directory as the source file.  However, CWL input files (and "
"the directories in which they appear) may be read-only, so we need to "
"instruct \"javac\" to write the class file to the designated output "
"directory instead."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:13
#: 7dfe9dffbf5744299bf232599644c7f6
msgid "`arguments.cwl`"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:19
#: ../../src/topics/staging-input-files.md:15 00709fa451134ee09a0d808e101f28ed
#: 991172e201ec4796992a349dee44f090
msgid "`arguments-job.yml`"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:24
#: 1f3c23a4769043ca985b8ddfed19391d
msgid "Next, create a sample Java file to use with the command-line tool."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:30
#: f81b43c7cb194a1cad8672129223c833
msgid ""
"And now invoke `cwltool` providing the tool description and the input "
"object on the command line:"
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:36
#: a20073a8f5374eb1bc8531ff33e622b6
msgid ""
"Here we use the `arguments` field to add an additional argument to the "
"command line that isn't tied to a specific input parameter."
msgstr ""

#: ../../src/topics/additional-arguments-and-parameters.md:43
#: d08869beca3a4774baf1097b63e79474
msgid ""
"This example references a runtime parameter.  Runtime parameters provide "
"information about the hardware or software environment when the tool is "
"actually executed.  The `$(runtime.outdir)` parameter is the path to the "
"designated output directory.  Other parameters include "
"`$(runtime.tmpdir)`, `$(runtime.ram)`, `$(runtime.cores)`, "
"`$(runtime.outdirSize)`, and `$(runtime.tmpdirSize)`.  See the [Runtime "
"Environment][runtime] section of the CWL specification for details."
msgstr ""

#: ../../src/topics/best-practices.md:1 109b773789024b2b9c063a6169c6169f
msgid "Best Practices"
msgstr ""

#: ../../src/topics/best-practices.md:3 959fa04f88e54d42b9b774cc95d85ee0
msgid ""
"The following are a set of recommended good practices to keep in mind "
"when writing a Common Workflow Language description for a tool or "
"workflow. These guidelines are presented for consideration on a scale of "
"usefulness: although more is better, not all are required."
msgstr ""

#: ../../src/topics/best-practices.md:8 64674980c3f24c45bbfbf3f957dda55e
msgid ""
"No `type: string` parameters for names of input or reference "
"files/directories; use `type: File` or `type: Directory` as appropriate."
msgstr ""

#: ../../src/topics/best-practices.md:11 90f2e4265919446a902e17627f4420e2
msgid ""
"A CWL document (in conjunction with any external components like "
"`Dockerfile`s) is software code. Workflow developers should be aware that"
" the usual rules of software licensing apply to this document. For "
"example, if the workflow is shared publicly, licensing terms must be "
"clear so that a future user understands under what conditions they can "
"run the workflow, modify it and/or combine it with other workflows. For "
"this reason, please consider including a license field in the document. "
"The authors of this guide urge you to choose a pre-existing license "
"rather than trying to write your own (see the link below to learn more "
"about choosing a license), and our recommended practice is to choose a "
"license that allows for re-use by anyone, e.g. [Apache 2.0][apache-"
"license]."
msgstr ""

#: ../../src/topics/best-practices.md:20 6b5f91a749fd44b5acfd6071c9913342
msgid ""
"If possible, the license should be specified with its corresponding [SPDX"
" identifier][spdx]. Construct the metadata field for the license by "
"providing a URL of the form `https://spdx.org/licenses/[SPDX-ID]` where "
"`SPDX-ID` is taken from the list of identifiers linked above. See the "
"example snippet below for guidance. For non-standard licenses without an "
"SPDX identifier, provide a URL to the license."
msgstr ""

#: ../../src/topics/best-practices.md:26 5fe2962837b14f0e9989063be4a506c3
msgid ""
"Useful reading: \"[A Quick Guide to Software Licensing for the Scientist-"
"Programmer][sci-license]\""
msgstr ""

#: ../../src/topics/best-practices.md:28 4e1bdea962ed4618884cb9d1d59d7509
msgid "_Example of metadata field for license with SPDX identifier:_"
msgstr ""

#: ../../src/topics/best-practices.md:37 37eff4ca02e843259f6ffa38e4a87a04
msgid ""
"For more examples of providing metadata within CWL descriptions, see  "
"[the Metadata and Authorship section of this User Guide](../topics"
"/metadata-and-authorship.md)."
msgstr ""

#: ../../src/topics/best-practices.md:40 ae47231c203d40a98c10045038ea9b65
msgid ""
"Include [attribution information][license-example] for the author(s) of "
"the CWL tool or workflow description. Use unambiguous identifiers like "
"[ORCID][orcid]."
msgstr ""

#: ../../src/topics/best-practices.md:44 018a6d5dbf1044559b365c7b9017eb3f
msgid ""
"In tool descriptions, list dependencies using short name(s) under "
"`SoftwareRequirement`."
msgstr ""

#: ../../src/topics/best-practices.md:47 e073d8f990c44b09a73d642cfe49bebd
msgid ""
"Include [SciCrunch][scicrunch] identifiers for dependencies in "
"`https://identifiers.org/rrid/RRID:SCR_NNNNNN` format."
msgstr ""

#: ../../src/topics/best-practices.md:50 e04fae88d9b64493ac69eaee24585098
msgid ""
"All `input` and `output` identifiers should reflect their conceptual "
"identity. Use informative names like `unaligned_sequences`, "
"`reference_genome`, `phylogeny`, or `aligned_sequences` instead of  "
"`foo_input`, `foo_file`, `result`, `input`, `output`, and so forth."
msgstr ""

#: ../../src/topics/best-practices.md:55 b26b9c9b1c4346a297a31c9721f0172a
msgid ""
"In tool descriptions, include a list of version(s) of the tool that are "
"known to work with this description under `SoftwareRequirement`."
msgstr ""

#: ../../src/topics/best-practices.md:58 b50500c3c3f54b16a535a16175a44653
msgid ""
"`format` should be specified for all input and output `File`s. "
"Bioinformatics tools should use format identifiers from [EDAM][edam-"
"example]. See also `iana:text/plain`, `iana:text/tab-separated-values` "
"with `$namespaces: { iana: \"https://www.iana.org/assignments/media-"
"types/\" }`. [Full IANA media type list][iana-types] (also known as MIME "
"types). For non-bioinformatics tools, use or build an appropriate "
"ontology/controlled vocabulary in the same way. Please edit this page to "
"let us know about it."
msgstr ""

#: ../../src/topics/best-practices.md:66 623f3a804199449bb85e23e00c8bb507
msgid ""
"Mark all input and output `File`s that are read from or written to in a "
"streaming compatible way (only once, no random-access), as `streamable: "
"true`."
msgstr ""

#: ../../src/topics/best-practices.md:69 effea0b1356447c0899ca0746667ea31
msgid ""
"Each `CommandLineTool` description should focus on a single operation "
"only, even if the (sub)command is capable of more. Don't overcomplicate "
"your tool descriptions with options that you don't need or use."
msgstr ""

#: ../../src/topics/best-practices.md:73 00e8ef87864c4ca2b2c1c0548b02b38d
msgid ""
"Custom types should be defined with one external YAML per type definition"
" for re-use."
msgstr ""

#: ../../src/topics/best-practices.md:76 6e6f48d70b894a6c959ca30fe6bad772
msgid "Include a top-level short `label` summarising the tool/workflow."
msgstr ""

#: ../../src/topics/best-practices.md:78 02fe08760a4a4ab49e96f4e51316a81d
msgid ""
"If useful, include a top-level `doc` as well. This should provide a "
"longer, more detailed description than was provided in the top-level "
"`label` (see above)."
msgstr ""

#: ../../src/topics/best-practices.md:82 172ed7915a654964ba63f860b2d65330
msgid ""
"Use `type: enum` instead of `type: string` for elements with a fixed list"
" of valid values."
msgstr ""

#: ../../src/topics/best-practices.md:85 4d0a2871a7484e21b3c39c4dbaaa63fc
msgid ""
"Evaluate all use of JavaScript for possible elimination or replacement. "
"One common example: manipulating `File` names and paths? Consider whether"
" one of the [built in `File` properties][file-prop] like `basename`, "
"`nameroot`, `nameext`, etc., could be used instead."
msgstr ""

#: ../../src/topics/best-practices.md:90 1eea9f1e284447718141f5417b6bb433
msgid ""
"Give the tool description to a colleague (preferably at a different "
"institution) to test and provide feedback."
msgstr ""

#: ../../src/topics/best-practices.md:93 509411d353fe4314b087b81b09ea960b
msgid ""
"Complex workflows with individual components which can be abstracted "
"should utilise the [`SubworkflowFeatureRequirement`][subworkflow] to make"
" their workflow modular and allow sections of them to be easily reused."
msgstr ""

#: ../../src/topics/best-practices.md:97 a54bc80bf08243bba67d98dd682ee134
msgid ""
"Software containers should be made to be conformant to the "
"[\"Recommendations for the packaging and containerizing of bioinformatics"
" software\"][containers] (also useful to other disciplines)."
msgstr ""

#: ../../src/topics/command-line-tool.md:1 69ecdaea24ef42eebef9d86e5d716b11
msgid "Command Line Tool"
msgstr ""

#: ../../src/topics/command-line-tool.md:3 3cc5847468d1478bb5589dee68147189
msgid ""
"A command-line tool is a type of Process object that can be run by itself"
" or as a Workflow step. It is a wrapper for a command like `ls`, `echo`, "
"`tar`, etc. The command-line tool is defined in the `baseCommand` "
"attribute of the command-line tool CWL document."
msgstr ""

#: ../../src/topics/command-line-tool.md:8 98c6bc409420485095ae65d6b0b9a3a0
msgid ""
"A CWL command-line tool must also have `inputs` and `outputs`. The "
"following example contains a minimal example of a CWL command-line tool "
"for the `echo` Linux command, using inputs and outputs."
msgstr ""

#: ../../src/topics/command-line-tool.md:19 ebe23e5378514f888a9ec32a2adb1e98
msgid "CWL command-line tool."
msgstr ""

#: ../../src/topics/command-line-tool.md:50 387cfe85604f424f8d31c4a4c9c15edb
msgid "`echo.cwl`"
msgstr ""

#: ../../src/topics/command-line-tool.md:57 7b1d65754e854693bb60289c97d3fb5d
msgid ""
"The example above uses a simplified form to define inputs and outputs. "
"You will learn more about in the [Inputs](../topics/inputs.md) and in the"
" [Outputs](../topics/outputs.md) sections."
msgstr ""

#: ../../src/topics/command-line-tool.md:68 f440cef729c8410281432307a4da8d55
msgid "Network Access"
msgstr ""

#: ../../src/topics/command-line-tool.md:69 4fbb8ceb1b59480583ac611142167049
msgid ""
"This indicates whether a process requires outgoing IPv4/IPv6 network "
"access. If a command-line tool is written manually in CWL v1.1+, there is"
" a need to  specify when network access is required."
msgstr ""

#: ../../src/topics/command-line-tool.md:83 b87869204838415bbf694214e3680593
msgid ""
"CWL v1.0 command-line tools that are upgraded to v1.1  or v1.2 get "
"Network Access automatically."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:1
#: 12cf5f2264504c44a2173e858bb2c283
msgid "Creating Files at Runtime"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:3
#: 7694f9cabfe04308bbddd2c88ae6d9b9
msgid ""
"Sometimes you need to create a file on the fly from input parameters, "
"such as tools that expect to read their input configuration from a file "
"rather than the command line parameters, or need a small wrapper shell "
"script."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:7
#: b557dc4f8ef549b98f59412a918643de
msgid "To generate such files, we can use the `InitialWorkDirRequirement`."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:9
#: 3011eb003c084285b30cfa56a8da45b6
msgid "`createfile.cwl`"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:15
#: 9f9c90a2bb4b4d3b8e99b63cb0e72f76
msgid ""
"Any [expressions](../topics/expressions.md) like `$(inputs.message)` are "
"expanded by the CWL engine before creating the file. Here, insert the "
"value at the input `message`."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:20
#: ce78b2d147054da895beba66d0ecdab4
msgid ""
"The _CWL expressions_ are independent of any _shell variables_ used later"
" during command line tool invocation. That means that any genuine need "
"for the character `$` must be **escaped** with `\\`. For instance, "
"`\\${PREFIX}` above is expanded to `${PREFIX}` in the generated file to "
"be evaluated by the shell script instead of the CWL engine."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:27
#: a973846ec5a946eeaff02c5b00997da9
msgid ""
"To test the above CWL tool, use this job to provide the input value "
"`message`:"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:29
#: ../../src/topics/environment-variables.md:13 ../../src/topics/outputs.md:77
#: 294fd83a97a64249bac38f7482159372 9e8eb1542db640ff9e300649ce50dc9d
#: ccec7f73b9d948e79a6cdf32bc124092
msgid "`echo-job.yml`"
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:35
#: 22948f19cb78485f8f86244686a35c09
msgid ""
"Before we run this, let us look at each step in a little more detail. The"
" base command `baseCommand: [\"sh\", \"example.sh\"]` will execute the "
"command `sh example.sh`. This will run the file we create in the shell."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:40
#: 001d9579bfce438e865377fb9c2df776
msgid ""
"`InitialWorkDirRequirement` requires a `listing`. As the `listing` is a "
"YAML array, we need a `-` on the first line of each element of the array,"
" in this case we have just one element. `entryname:` can have any value, "
"but it must match what was specified in the `baseCommand`. The final part"
" is `entry:`, this is followed by `|-` which is YAML quoting syntax, and "
"means that you are using a multiline string (without it, we would need to"
" write the whole script on one line)."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:51
#: e62618db8995428bb3f260e03ac8f459
msgid ""
"See the [YAML Guide](../topics/yaml-guide.md#maps) for more about the "
"formatting."
msgstr ""

#: ../../src/topics/creating-files-at-runtime.md:54
#: ../../src/topics/environment-variables.md:18
#: ../../src/topics/file-formats.md:52
#: ../../src/topics/staging-input-files.md:20 ../../src/topics/workflows.md:198
#: 457756c4e9544f068af897113358cc89 6d5ae75431424ea788c3440606f22940
#: 98e0548845fa447fb05a29c9fc2f17b5 de5e8aad4e3046bf9bfc2ad8ccba17d0
#: e9801b2142cd45368a73ef9b121c1d08
msgid ""
"Now invoke `cwltool` with the tool description and the input object on "
"the command line:"
msgstr ""

#: ../../src/topics/custom-types.md:1 ee2bca9bdbb74b60a706c3118d6a17ba
msgid "Custom Types"
msgstr ""

#: ../../src/topics/custom-types.md:3 e63ae9694f40438d872d141ae824a42d
msgid ""
"Sometimes you may want to write your own custom types for use and reuse "
"in CWL descriptions. Use of such custom types can reduce redundancy "
"between multiple descriptions that all use the same type, and also allow "
"for additional customisation/configuration of a tool/analysis without the"
" need to fiddle with the CWL description directly."
msgstr ""

#: ../../src/topics/custom-types.md:9 750fdd4c270e46a09f79e867358f7414
msgid ""
"The example below is a CWL description of the [biom convert format][biom]"
" tool for converting a standard biom table file to hdf5 format."
msgstr ""

#: ../../src/topics/custom-types.md:12 b3f688cc82444ef7a7a0aa63dac39cac
msgid "`custom-types.cwl`"
msgstr ""

#: ../../src/topics/custom-types.md:18 3638be18b4f64cf08053d512e590dda3
msgid "`custom-types.yml`"
msgstr ""

#: ../../src/topics/custom-types.md:24 7d5b9c21739c48f18c13614ca6967f6b
msgid ""
"___Note:___ To follow the example below, you need to [download the "
"example input file](https://github.com/common-workflow-"
"language/user_guide/blob/main/src/_includes/cwl/custom-"
"types/rich_sparse_otu_table.biom), *rich_sparse_otu_table.biom* e.g. via "
"`wget`:"
msgstr ""

#: ../../src/topics/custom-types.md:30 8fea29993f944d8d8d3181afa29bd0a6
msgid ""
"On line 29, in `inputs:table_type`, a list of allowable table options to "
"be used in the table conversion are imported as a custom object:"
msgstr ""

#: ../../src/topics/custom-types.md:46 02d0b648d70f49d7892f690be06df585
msgid ""
"The reference to a custom type is a combination of the name of the file "
"in which the object is defined (`biom-convert-table.yaml`) and the name "
"of the object within that file (`table_type`) that defines the custom "
"type. In this case the `symbols` array from the imported `biom-convert-"
"table.yaml` file define the allowable table options. For example, in "
"`custom-types.yml`, we pass `OTU table` as an `input` that tells the tool"
" to create an OTU table in hdf5 format."
msgstr ""

#: ../../src/topics/custom-types.md:53 0743bef42b9a42328849c8c2f9da9eed
msgid "The contents of the YAML file describing the custom type are given below:"
msgstr ""

#: ../../src/topics/custom-types.md:55 85c5d0cbbc6243a6823f5eeac0f85dd9
msgid "`biom-convert-table.yaml`"
msgstr ""

#: ../../src/topics/custom-types.md:61 be848f30769543eb9c0be55263e3f758
msgid ""
"In order for the custom type to be used in the CWL description, it must "
"be imported. Imports are described in "
"`requirements:SchemaDefRequirement`, as below in the example `custom-"
"types.cwl` description:"
msgstr ""

#: ../../src/topics/custom-types.md:76 cbff44a64ba4432cb59a82f82c2f0103
msgid ""
"Note also that the author of this CWL description has also included "
"`ResourceRequirement`s, specifying the minimum amount of RAM and number "
"of cores required for the tool to run successfully, as well as details of"
" the version of the software that the description was written for and "
"other useful metadata. These features are discussed further in other "
"chapters of this user guide."
msgstr ""

#: ../../src/topics/environment-variables.md:1 617f1c0084cf42d9be4c7a8fa5a48432
msgid "Environment Variables"
msgstr ""

#: ../../src/topics/environment-variables.md:3 cee79afa3c6f43c29ef05e06b7843d35
msgid ""
"Tools run in a restricted environment and do not inherit most environment"
" variables from the parent process.  You can set environment variables "
"for the tool using `EnvVarRequirement`."
msgstr ""

#: ../../src/topics/environment-variables.md:7 225903b11efa417989df42de86ad2451
msgid "`env.cwl`"
msgstr ""

#: ../../src/topics/expression-tool.md:1 1a5f058290064c1cad05e63eb127fcbb
msgid "Expression Tool"
msgstr ""

#: ../../src/topics/expression-tool.md:3 74ad8d69cf294ae880dbbe28e25b3545
msgid ""
"An expression tool is a type of Process that can be run by itself or as a"
" Workflow step. It executes a pure JavaScript expression. It is meant to "
"be used as a way to isolate complex JavaScript expressions that need to "
"operate on input data and produce some result as output."
msgstr ""

#: ../../src/topics/expression-tool.md:8 5293e8ee9b3b4f59947cfc164ef111c4
msgid ""
"Similar to the command-line tool it requires `inputs` and `outputs`. But "
"instead of `baseCommand`, it requires an `expression` attribute."
msgstr ""

#: ../../src/topics/expression-tool.md:17 ffa1955c759942c68e7589429e5ea86b
msgid "CWL expression tool."
msgstr ""

#: ../../src/topics/expression-tool.md:48 038bc0ba5f6a405a8255a7be76979baf
msgid "`uppercase.cwl`"
msgstr ""

#: ../../src/topics/expression-tool.md:67 fae1c63de02e48c0969a98e4c49b2e06
msgid ""
"We had to use an `InlineJavascriptRequirement` as our expression contains"
" a JavaScript call in `.toUpperCase()`. This means to tools using the "
"expression tool that JavaScript is a requirement."
msgstr ""

#: ../../src/topics/expressions.md:1 7093a94695524851a5463193f0701b78
msgid "Expressions"
msgstr ""

#: ../../src/topics/expressions.md:3 dc8274ecb15948c29a31db89b12a58bd
msgid ""
"If you need to manipulate input parameters, include the requirement "
"`InlineJavascriptRequirement` and then anywhere a parameter reference is "
"legal you can provide a fragment of Javascript that will be evaluated by "
"the CWL runner."
msgstr ""

#: ../../src/topics/expressions.md:9 cec8eef8a5aa49778ecedd4195ab9f2c
msgid ""
"JavaScript expressions should only be used when absolutely necessary. "
"When manipulating file names, extensions, paths etc, consider whether one"
" of the [built in `File` properties][file-prop] like `basename`, "
"`nameroot`, `nameext`, etc, could be used instead. See the [list of best "
"practices](best-practices.md)."
msgstr ""

#: ../../src/topics/expressions.md:16 df100967597043c78112bf43b520cfab
msgid "`expression.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:22 59ccf4daba39406581a6bc2d9bb1b7d2
msgid ""
"As this tool does not require any `inputs` we can run it with an (almost)"
" empty job file:"
msgstr ""

#: ../../src/topics/expressions.md:25 570cc75699dd4e0a987fc9aca9a01ee4
msgid "`empty.yml`"
msgstr ""

#: ../../src/topics/expressions.md:31 9e123723048546d495ed5110d7177708
msgid ""
"`empty.yml` contains a description of an empty JSON object. JSON objects "
"descriptions are contained inside curly brackets `{}`, so an empty object"
" is represented simply by a set of empty brackets."
msgstr ""

#: ../../src/topics/expressions.md:35 26543894f6e04270b89ab702451bcc89
msgid "We can then run `expression.cwl`:"
msgstr ""

#: ../../src/topics/expressions.md:37 f403c1d4e43a4aa0aef8488d2b5a6262
msgid "Running `expression.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:47 249dffb569a944c897ce5862e5f28fad
msgid ""
"Note that requirements can be provided with the map syntax, as in the "
"example above:"
msgstr ""

#: ../../src/topics/expressions.md:54 1641c96aca2f4923885fe8a509eb3a49
msgid ""
"Or as an array, with each entry (in this case, only `class: "
"InlineJavascriptRequirement`) marked by a `-`. The same syntax is used to"
" describe the additional command line arguments."
msgstr ""

#: ../../src/topics/expressions.md:62 bc63405a0d964df2bd9493996abc48fe
msgid "Where are JavaScript expressions allowed?"
msgstr ""

#: ../../src/topics/expressions.md:64 5c191d1420db4e26aca31c1b1e34cb75
msgid ""
"Just like [parameter references](parameter-references.md), you can use "
"JavaScript Expressions only in certain fields.  These are:"
msgstr ""

#: ../../src/topics/expressions.md:66 d6a5c65e824a4bbc94578df9597d4716
msgid ""
"From "
"[`CommandLineTool`](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineTool)"
msgstr ""

#: ../../src/topics/expressions.md:67
#: ../../src/topics/parameter-references.md:64 a7ff51fe564748229a88a0d3044dbc17
#: c12625211cc542b68cb51365a63eef00
msgid "`arguments`"
msgstr ""

#: ../../src/topics/expressions.md:68 ../../src/topics/expressions.md:76
#: ../../src/topics/expressions.md:89
#: ../../src/topics/parameter-references.md:65
#: ../../src/topics/parameter-references.md:73
#: ../../src/topics/parameter-references.md:86 05c34a5a2e404a14b9d284a9d0c73bd3
#: 2a2286a9c8494e3b88db35bf63230f33 3a64ccbbf70447d1a813a725e528b6fe
#: 5fb932af34a54a0ea691260d43053eba e5b0293e6fcd4e9b8d7be3fc9fc127d3
#: e7f1993580f0425098a719e83a64cc7f
msgid "`valueFrom`"
msgstr ""

#: ../../src/topics/expressions.md:69
#: ../../src/topics/parameter-references.md:66 2fd5b42cafe34d3185888de041818dff
#: c158e9ee5fbf4e868b152a0a5880092f
msgid "`stdin`"
msgstr ""

#: ../../src/topics/expressions.md:70
#: ../../src/topics/parameter-references.md:67 3f29e4a3087847e9af6f19166a8def9a
#: 92697d3179ec48898eaea9aba3c24dcd
msgid "`stdout`"
msgstr ""

#: ../../src/topics/expressions.md:71
#: ../../src/topics/parameter-references.md:68 c0eaef93bc3743279549bcfb8b014ca3
#: d6722e3093884ad7b62696fbb2f48fdc
msgid "`stderr`"
msgstr ""

#: ../../src/topics/expressions.md:72 37c493fdc2f0410a9748f8faf09ce5b5
msgid ""
"From "
"[CommandInputParameter](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandInputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:73 ../../src/topics/expressions.md:78
#: ../../src/topics/expressions.md:85 ../../src/topics/expressions.md:93
#: ../../src/topics/parameter-references.md:70
#: ../../src/topics/parameter-references.md:75
#: ../../src/topics/parameter-references.md:82
#: ../../src/topics/parameter-references.md:90 04e3eefe4ec445cb90c2fa42344aaed5
#: 07611b01b06a4afb808322a0dccccf30 4ff7326e660f42d8b45c3353005554f8
#: 6020618711d449a48618c11215453487 7b132c6e720f4256859757778f5c4fef
#: 9cfb6ca1255241aa9e5928ea981286e9 c358a25b1f9543598b90d3df7c012b85
#: c610220d06484d589313dc29faf8222c
msgid "`format`"
msgstr ""

#: ../../src/topics/expressions.md:74 ../../src/topics/expressions.md:79
#: ../../src/topics/expressions.md:86 ../../src/topics/expressions.md:94
#: ../../src/topics/parameter-references.md:71
#: ../../src/topics/parameter-references.md:76
#: ../../src/topics/parameter-references.md:83
#: ../../src/topics/parameter-references.md:91 662b36e3505f4ac3bb5070bb6e055217
#: 6dfc264200a9496f9d2458fc759993d8 74652fdbeaf14d82b9c5053e322504da
#: 93d2b17bb236426286ffd51bbecda61d a44c278bde5849aeac122c981294332c
#: e193aebe7124444c90be1f6cad81482a ee3d416cc68c4f11a79849bb67395f1b
#: f71216a4b35e4157aece5ffa2602d8bf
msgid "`secondaryFiles`"
msgstr ""

#: ../../src/topics/expressions.md:75 a3c775a0f04b4541a9b712bfe2e4e69a
msgid ""
"From "
"[`inputBinding`](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineBinding)"
msgstr ""

#: ../../src/topics/expressions.md:77 ef16c4a9a7ea415fa399297b63b9710c
msgid ""
"From "
"[CommandOutputParamater](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:80 2592e429c74c4ff5b8ba68a36f060c1a
msgid ""
"From "
"[CommandOutputBinding](https://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputBinding)"
msgstr ""

#: ../../src/topics/expressions.md:81
#: ../../src/topics/parameter-references.md:78 5cca4c2ad617400eb6efad4066b1839b
#: ba1fff3ebb274dfba845b3ee20ebd71f
msgid "`glob`"
msgstr ""

#: ../../src/topics/expressions.md:82
#: ../../src/topics/parameter-references.md:79 6914526c0a7c43a2a05438519508ee0f
#: 722d3bd7184841639b9f9a38914002da
msgid "`outputEval`"
msgstr ""

#: ../../src/topics/expressions.md:83
#: ../../src/topics/parameter-references.md:80 737b0f9392154241ae5b56c6caa823f5
#: 7b46d408e7e7481b91a950b2d4010c9a
msgid "From `Workflow`"
msgstr ""

#: ../../src/topics/expressions.md:84 f09e7371708b4c0685eef2a314791ccd
msgid ""
"From "
"[InputParameter](https://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[WorkflowOutputParameter](https://www.commonwl.org/v1.0/Workflow.html#WorkflowOutputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:87
#: ../../src/topics/parameter-references.md:84 aa6ca1def2024c98b9d5542de1a81425
#: e9fc5f7fa4474dfc95039b94167fe894
msgid "From `steps`"
msgstr ""

#: ../../src/topics/expressions.md:88 6c37a1ff939748bf83a86c07c3d017fe
msgid ""
"From "
"[WorkflowStepInput](https://www.commonwl.org/v1.0/Workflow.html#WorkflowStepInput)"
msgstr ""

#: ../../src/topics/expressions.md:90
#: ../../src/topics/parameter-references.md:87 3a8126b0a0334df890b2be2c693ea5d5
#: 61744122b7d7494890cbe6b2fb72b9f7
msgid ""
"From "
"[ExpressionTool](https://www.commonwl.org/v1.0/Workflow.html#ExpressionTool)"
msgstr ""

#: ../../src/topics/expressions.md:91
#: ../../src/topics/parameter-references.md:88 93cb9015dacc4b50a4ef177ce4ece2e7
#: e0c7ccc8f8664cf794cbb7330355f3fe
msgid "`expression`"
msgstr ""

#: ../../src/topics/expressions.md:92 58a1773b1cf546d7890010fdebd47388
msgid ""
"From "
"[InputParameter](https://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[ExpressionToolOutputParameter](https://www.commonwl.org/v1.0/Workflow.html#ExpressionToolOutputParameter)"
msgstr ""

#: ../../src/topics/expressions.md:95 230f3227ed1144f7abe0f8c231bebbd5
msgid ""
"From "
"[`ResourceRequirement`](https://www.commonwl.org/v1.0/CommandLineTool.html#ResourceRequirement)"
msgstr ""

#: ../../src/topics/expressions.md:96
#: ../../src/topics/parameter-references.md:93 5c77dc9f8afe4dd88933943030e836f2
#: c9534670f5f04769aa3749c3778eb705
msgid "`coresMin`"
msgstr ""

#: ../../src/topics/expressions.md:97
#: ../../src/topics/parameter-references.md:94 4ec8bbac5fb14371a6a4cd53d7cd6450
#: 7b0887a8caed41b2acccf7021bb323d3
msgid "`coresMax`"
msgstr ""

#: ../../src/topics/expressions.md:98
#: ../../src/topics/parameter-references.md:95 aceedfb558b246bc87eb3eaedea187fd
#: e5e8b8c75f0f43cbb6e160e5bf810c6e
msgid "`ramMin`"
msgstr ""

#: ../../src/topics/expressions.md:99
#: ../../src/topics/parameter-references.md:96 266dfb5fe6a842078baf66073cac9623
#: fe3b9fb45e01490498c5a35c012b3de8
msgid "`ramMax`"
msgstr ""

#: ../../src/topics/expressions.md:100
#: ../../src/topics/parameter-references.md:97 85f424cbfc85460f9da310aee1ff0b82
#: ddf82b12b12d416fb65f3ce3f51bbdf0
msgid "`tmpdirMin`"
msgstr ""

#: ../../src/topics/expressions.md:101
#: ../../src/topics/parameter-references.md:98 966e88656ae5402a975022ee60646283
#: af14fda3cca645fbb2f3c5825fe0788e
msgid "`tmpdirMax`"
msgstr ""

#: ../../src/topics/expressions.md:102
#: ../../src/topics/parameter-references.md:99 09120baec1464afb8aed4edd773bf509
#: fec70bb106ad4d95a2d55ebdcf711afc
msgid "`outdirMin`"
msgstr ""

#: ../../src/topics/expressions.md:103
#: ../../src/topics/parameter-references.md:100
#: 2e128858cd06466680fc6bbfb577b818 c98db5b115ee4c4abb211481fe7214b0
msgid "`outdirMax`"
msgstr ""

#: ../../src/topics/expressions.md:104 1dc4148caef748428a7d13caff37b1b1
msgid ""
"From "
"[`InitialWorkDirRequirement`](https://www.commonwl.org/v1.0/CommandLineTool.html#InitialWorkDirRequirement)"
msgstr ""

#: ../../src/topics/expressions.md:105
#: ../../src/topics/parameter-references.md:102
#: 568406e34c8642578396177b40043014 8caf296626024598b4450311ade09e56
msgid "`listing`"
msgstr ""

#: ../../src/topics/expressions.md:106 947b1ca132a54ed39745cd12ebcd65e1
msgid "in [Dirent](https://www.commonwl.org/v1.0/CommandLineTool.html#Dirent)"
msgstr ""

#: ../../src/topics/expressions.md:107
#: ../../src/topics/parameter-references.md:104
#: 3af8e4ce750048e6b9de12d26b9647a6 f56fb5fa08994fe08cc8ae8c193828d9
msgid "`entry`"
msgstr ""

#: ../../src/topics/expressions.md:108
#: ../../src/topics/parameter-references.md:105
#: 063e2ae9a0eb404e8c277ef7090eb6bc c6dbe0a66b9f47e5b4b47c44d9f54519
msgid "`entryname`"
msgstr ""

#: ../../src/topics/expressions.md:109
#: ../../src/topics/parameter-references.md:106
#: 39c6edc2866542cfa7da9f842fd3edd0 72acfeef964841e7b65937b62b5850f0
msgid "From `EnvVarRequirement`"
msgstr ""

#: ../../src/topics/expressions.md:110 5fa512d352d945e7a3e0d59b0987cd1b
msgid ""
"From "
"[EnvironmentDef](https://www.commonwl.org/v1.0/CommandLineTool.html#EnvironmentDef)"
msgstr ""

#: ../../src/topics/expressions.md:111
#: ../../src/topics/parameter-references.md:108
#: 520bf799546b4700a4f38f950ffd913b 79755be159fb45b0ad06cecce623ce2c
msgid "`envValue`"
msgstr ""

#: ../../src/topics/expressions.md:116 81e91df082834d2cab7ef1f62d8ba57a
msgid "Using External Libraries and Inline JavaScript Code with `expressionLib`"
msgstr ""

#: ../../src/topics/expressions.md:118 e6bfd1dc2e324992b6c3332c11ae3445
msgid ""
"The requirement `InlineJavascriptRequirement` supports an `expressionLib`"
" attribute that allows users to load external JavaScript files, or to "
"provide inline JavaScript code."
msgstr ""

#: ../../src/topics/expressions.md:122 acf10261df2944ec890d754fd56c6b28
msgid ""
"Entries added to the `expressionLib` attribute are parsed with the "
"JavaScript engine of a CWL runner. This can be used to include external "
"files or to create JavaScript functions that can be called in other parts"
" of the CWL document."
msgstr ""

#: ../../src/topics/expressions.md:128 bda6b8f398554b0c946c2c7d96308a42
msgid ""
"The CWL standards (versions 1.0 through 1.2) "
"[states](https://www.commonwl.org/v1.0/CommandLineTool.html#Expressions)"
"  that the only version of JavaScript valid in CWL expressions is "
"[ECMAScript 5.1](https://262.ecma-international.org/5.1/). This means "
"that any code that you include or write in your CWL Document must be "
"compliant with ECMAScript 5.1."
msgstr ""

#: ../../src/topics/expressions.md:135 454c02c3918647039c90ae387005dea6
msgid ""
"For example, we can use `InlineJavascriptRequirement` and write a "
"JavaScript function inline in `expressionLib`. That function can then be "
"used in other parts of the CWL document:"
msgstr ""

#: ../../src/topics/expressions.md:139 e1fad28bf9cb4c4c85eb74dd520ba107
msgid "`hello-world-expressionlib-inline.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:146 9835d0b399b84a0084fe5a4d9e7e6405
msgid ""
"Running this CWL workflow will invoke the JavaScript function and result "
"in the `echo` command printing the input message with capital initial "
"letters:"
msgstr ""

#: ../../src/topics/expressions.md:149 410ba7a5ac6349a98460c6337ee5c4fb
msgid "Running `hello-world-expressionlib-inline.cwl`."
msgstr ""

#: ../../src/topics/expressions.md:155 d2daf50d7f3d4de18331c8fd2c8a5786
msgid ""
"Let's move the `capitalizeWords` function to an external file, `custom-"
"functions.js`, and import it in our CWL document:"
msgstr ""

#: ../../src/topics/expressions.md:158 8f2015c12b2b4d5d9a800ddeaf428f25
msgid "`custom-functions.js`"
msgstr ""

#: ../../src/topics/expressions.md:164 f0ff919ffc12439d89d7b40f51ade84c
msgid "`hello-world-expressionlib-external.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:171 307a17a893fc4dafaec2a63a95704644
msgid ""
"The `custom-functions.js` file is included in the CWL document with the "
"`$include: custom-functions.js` statement. That makes the functions and "
"variables available to be used in other parts of the CWL document."
msgstr ""

#: ../../src/topics/expressions.md:175 7f393e86b114470f8dda47b2deec63aa
msgid "Running `hello-world-expressionlib-external.cwl`."
msgstr ""

#: ../../src/topics/expressions.md:181 c3f459b87b96435583637b3f1573e658
msgid ""
"Finally, note that you can have both inline and external JavaScript code "
"in your CWL document. In this final example we have added another entry "
"to the `expressionLib` attribute with the new function "
"`createHelloWorldMessage`, that calls the `capitalizeWords` function from"
" the external file `custom-functions.js`."
msgstr ""

#: ../../src/topics/expressions.md:186 9f676022eb2744839ca2109920250cb6
msgid "`hello-world-expressionlib.cwl`"
msgstr ""

#: ../../src/topics/expressions.md:193 ede7285f77864fb0aee6cfecc2c97fa0
msgid "Running `hello-world-expressionlib.cwl`."
msgstr ""

#: ../../src/topics/expressions.md:200 c55fb184bc614ee2b6e5e64611e5df9b
msgid ""
"The `$include` statement can be used to include a file from the local "
"disk or from a remote location. It works with both relative and absolute "
"paths. Read the [text about "
"`$include`](https://www.commonwl.org/v1.0/SchemaSalad.html#Include) from "
"the CWL specification to learn more about it."
msgstr ""

#: ../../src/topics/file-formats.md:1 66b522f46ce242149386e79f63b32cf8
msgid "File Formats"
msgstr ""

#: ../../src/topics/file-formats.md:3 64a20285785d48ca86227a0cf6353ad4
msgid ""
"Tools and workflows can take `File` types as input and produce them as "
"output. We also recommend indicating the format for `File` types. This "
"helps document for others how to use your tool while allowing you to do "
"some simple type-checking when creating parameter files."
msgstr ""

#: ../../src/topics/file-formats.md:8 5f71bbe2c74e4260b79d4d9230d35397
msgid ""
"For file formats, we recommend referencing existing ontologies (like EDAM"
" in our example), reference a local ontology for your institution, or do "
"not add a file format initially for quick development before sharing your"
" tool with others. You can browse existing [IANA file format "
"listings][IANA] and [EDAM file format listings][EDAM] on their websites."
msgstr ""

#: ../../src/topics/file-formats.md:14 63bfff437e3348428f7e33ece7ec55e7
msgid ""
"In the next tutorial, we explain  the `$namespaces` and `$schemas` "
"section of the document in greater detail, so don't worry about these for"
" now."
msgstr ""

#: ../../src/topics/file-formats.md:17 6ce83d9c06e4436881aa47d94ef41e0b
msgid ""
"Note that for added value `cwltool` can do some basic reasoning based on "
"file formats and warn you if there seem to be some obvious mismatches."
msgstr ""

#: ../../src/topics/file-formats.md:20 55006c594abf4e70a38e979568fadcf4
msgid "`metadata_example.cwl`"
msgstr ""

#: ../../src/topics/file-formats.md:26
#: ../../src/topics/metadata-and-authorship.md:22
#: 12ba2083a9ae4c78bf502ab762a29c7d 5c8f1709fe61423bba3ceaca2fc7cf09
msgid "The equivalent of this CWL description in command line format is:"
msgstr ""

#: ../../src/topics/file-formats.md:32 1a1905ff2d624eca952c8a53b3bee678
msgid "Sample Parameter Files"
msgstr ""

#: ../../src/topics/file-formats.md:34 368ff92476b14f5c8331260eafc5acb5
msgid ""
"Below is an example of a parameter file for the example above. We "
"encourage checking in working examples of parameter files for your tool. "
"This allows others to quickly work with your tool, starting from a "
"\"known good\" parameterization."
msgstr ""

#: ../../src/topics/file-formats.md:39 5d530afa23f349a79f54d51d40724747
msgid "`sample.yml`"
msgstr ""

#: ../../src/topics/file-formats.md:45 16f965f86712483aa7f95dfa3f944a17
msgid ""
"___Note:___ To follow the example below, you need to download the example"
" input file, *file-formats.bam*. The file is available from "
"<https://github.com/common-workflow-"
"language/user_guide/raw/main/src/_includes/cwl/file-formats/file-"
"formats.bam>  and can be downloaded e.g. via `wget`:"
msgstr ""

#: ../../src/topics/index.md:1 dc629e2c90ed458b96107a6994676434
msgid "Topics"
msgstr ""

#: ../../src/topics/inputs.md:1 cf2f077cf8044079a7005e6e508dcd8c
msgid "Inputs"
msgstr ""

#: ../../src/topics/inputs.md:3 129e1d2a71894d28b009f4846754a75d
msgid "Essential Input Parameters"
msgstr ""

#: ../../src/topics/inputs.md:5 d6791bbe575042b9a7282c69407dd907
msgid ""
"The `inputs` of a tool is a list of input parameters that control how to "
"run the tool.  Each parameter has an `id` for the name of parameter, and "
"`type` describing what types of values are valid for that parameter."
msgstr ""

#: ../../src/topics/inputs.md:9 e8da87f8bb664334adf831995601f462
msgid ""
"Available primitive types are *string*, *int*, *long*, *float*, *double*,"
" and *null*; complex types are *array* and *record*; in addition there "
"are special types *File*, *Directory* and *Any*."
msgstr ""

#: ../../src/topics/inputs.md:13 de6c322618304207b6d1364d1ec2dc13
msgid ""
"The following example demonstrates some input parameters with different "
"types and appearing on the command line in different ways."
msgstr ""

#: ../../src/topics/inputs.md:16 43bdcf6dc1b14030bff27fa53289c02c
msgid "First, create a file called `inp.cwl`, containing the following:"
msgstr ""

#: ../../src/topics/inputs.md:18 056510b42ea64717996ab49c307bda86
msgid "`inp.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:24 6852f5dbd9094c99bb68f2a88f76c9bc
msgid "Create a file called `inp-job.yml`:"
msgstr ""

#: ../../src/topics/inputs.md:26 f33b6800367248b7927d97ad7b4be5b5
msgid "`inp-job.yml`"
msgstr ""

#: ../../src/topics/inputs.md:33 8ad812d7e88f4cbba83228ffb1711576
msgid ""
"You can use `cwltool` to create a template input object. That saves you "
"from having to type all the input parameters in a input object file:"
msgstr ""

#: ../../src/topics/inputs.md:40 cc680bbf091a46f8b4b3dbe6324c040a
msgid ""
"You can redirect the output to a file, i.e. `cwltool --make-template "
"inp.cwl > inp-job.yml`, and then modify the default values with your "
"desired input values."
msgstr ""

#: ../../src/topics/inputs.md:44 446ac81f078d46289a18f494748f482c
msgid ""
"Notice that \"example_file\", as a `File` type, must be provided as an "
"object with the fields `class: File` and `path`."
msgstr ""

#: ../../src/topics/inputs.md:47 3d6d958d111943f3a2139b4dbb7810db
msgid ""
"Next, create a whale.txt using [touch] by typing `touch whale.txt` on the"
" command line."
msgstr ""

#: ../../src/topics/inputs.md:53 ba0ec9157709430c822f4e91459288e2
msgid ""
"Now invoke `cwltool` with the tool description and the input object on "
"the command line, using the command `cwltool inp.cwl inp-job.yml`. The "
"following boxed text describes these two commands and the expected output"
" from the command line:"
msgstr ""

#: ../../src/topics/inputs.md:64 2565f8fd4a15429e887aeb71eacdff1e
msgid ""
"The CWL reference runner (cwltool) and other runners create temporary "
"directories with symbolic (\"soft\") links to your input files to ensure "
"that the tools aren't accidentally accessing files that were not "
"explicitly specified"
msgstr ""

#: ../../src/topics/inputs.md:70 659ed5c64fb546399b741553a347b8e8
msgid ""
"The field `inputBinding` is optional and indicates whether and how the "
"input parameter should appear on the tool's command line.  If "
"`inputBinding` is missing, the parameter does not appear on the command "
"line.  Let's look at each example in detail."
msgstr ""

#: ../../src/topics/inputs.md:83 3d87e69d41374fbab23b26d36c1aee03
msgid ""
"Boolean types are treated as a flag.  If the input parameter "
"\"example_flag\" is \"true\", then `prefix` will be added to the command "
"line.  If false, no flag is added."
msgstr ""

#: ../../src/topics/inputs.md:95 07bc81683e2c4ac68b379462bae95207
msgid ""
"String types appear on the command line as literal values.  The `prefix` "
"is optional, if provided, it appears as a separate argument on the "
"command line before the parameter .  In the example above, this is "
"rendered as `--example-string hello`."
msgstr ""

#: ../../src/topics/inputs.md:109 3e304da2150f448d9e39715ac5f5deaa
msgid ""
"Integer (and floating point) types appear on the command line with "
"decimal text representation.  When the option `separate` is false (the "
"default value is true), the prefix and value are combined into a single "
"argument.  In the example above, this is rendered as `-i42`."
msgstr ""

#: ../../src/topics/inputs.md:124 fd8a98686e3c4c609f79ae427f1558d3
msgid ""
"File types appear on the command line as the path to the file.  When the "
"parameter type ends with a question mark `?` it indicates that the "
"parameter is optional.  In the example above, this is rendered as "
"`--file=/tmp/random/path/whale.txt`.  However, if the \"example_file\" "
"parameter were not provided in the input, nothing would appear on the "
"command line."
msgstr ""

#: ../../src/topics/inputs.md:131 f1a2e1bbb1104a4fab5a7f04cac845c7
msgid ""
"Input files are read-only.  If you wish to update an input file, you must"
" [first copy it to the output directory](staging-input-files.md)."
msgstr ""

#: ../../src/topics/inputs.md:134 6a7f0ccd227e4f90a8c8ca96744bda68
msgid ""
"The value of `position` is used to determine where parameter should "
"appear on the command line.  Positions are relative to one another, not "
"absolute.  As a result, positions do not have to be sequential, three "
"parameters with positions 1, 3, 5 will result in the same command line as"
" 1, 2, 3.  More than one parameter can have the same position (ties are "
"broken using the parameter name), and the position field itself is "
"optional.  The default position is 0."
msgstr ""

#: ../../src/topics/inputs.md:142 1f79d115d8a145189638c68c3095396c
msgid ""
"The `baseCommand` field will always appear in the final command line "
"before the parameters."
msgstr ""

#: ../../src/topics/inputs.md:146 6e1b3e2d90184e34925891099d2b5cc1
msgid "Array Inputs"
msgstr ""

#: ../../src/topics/inputs.md:148 4f6df7f13e42448eb4a53f03bc477b56
msgid ""
"It is easy to add arrays of input parameters represented to the command "
"line. There are two ways to specify an array parameter. First is to "
"provide `type` field with `type: array` and `items` defining the valid "
"data types that may appear in the array. Alternatively, brackets `[]` may"
" be added after the type name to indicate that input parameter is array "
"of that type."
msgstr ""

#: ../../src/topics/inputs.md:154 dbc0b52627514ad0908969d0b4ddfdf4
msgid "`array-inputs.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:160 f173dd96ad124470a53573c86a8df203
msgid "`array-inputs-job.yml`"
msgstr ""

#: ../../src/topics/inputs.md:166 ../../src/topics/outputs.md:82
#: ../../src/topics/outputs.md:105 af25945b530048b685891b1de4e35e72
#: cb07caa4ff0149b3ae832be53f8d76f6 e0098a77080d4349b05ceb7735a5fdf5
msgid ""
"Now invoke `cwltool` providing the tool description and the input object "
"on the command line:"
msgstr ""

#: ../../src/topics/inputs.md:178 2445d2c7c2794fd3ad8b6ed8b4a9440b
msgid ""
"The `inputBinding` can appear either on the outer array parameter "
"definition or the inner array element definition, and these produce "
"different behavior when constructing the command line, as shown above. In"
" addition, the `itemSeparator` field, if provided, specifies that array "
"values should be concatenated into a single argument separated by the "
"item separator string."
msgstr ""

#: ../../src/topics/inputs.md:185 4459819ba75647d185986a3386939494
msgid ""
"Note that the arrays of inputs are specified inside square brackets `[]` "
"in `array-inputs-job.yml`. Arrays can also be expressed over multiple "
"lines, where array values that are not defined with an associated key are"
" marked by a leading `-`. This will be demonstrated in the next lesson "
"and is discussed in more detail in the [YAML Guide](yaml-"
"guide.md#arrays). You can specify arrays of arrays, arrays of records, "
"and other complex types."
msgstr ""

#: ../../src/topics/inputs.md:191 8f163bd34ded4785b6e28c8e2147e0dd
msgid "Inclusive and Exclusive Inputs"
msgstr ""

#: ../../src/topics/inputs.md:193 1799e11a7b9c4929a3d1379d7ea45d03
msgid ""
"Sometimes an underlying tool has several arguments that must be provided "
"together (they are dependent) or several arguments that cannot be "
"provided together (they are exclusive).  You can use records and type "
"unions to group parameters together to describe these two conditions."
msgstr ""

#: ../../src/topics/inputs.md:198 9510c0b431a44b5e84e0b583de7c5446
msgid "`record.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:204 efb4eb6f5e994b50a52fa2c707dad1ce
msgid "`record-job1.yml`"
msgstr ""

#: ../../src/topics/inputs.md:215 34599c6f10ce4104be2359a1b37f91cb
msgid ""
"In the first example, you can't provide `itemA` without also providing "
"`itemB`."
msgstr ""

#: ../../src/topics/inputs.md:217 0663ea7918994d3f9c45c652a3ed12db
msgid "`record-job2.yml`"
msgstr ""

#: ../../src/topics/inputs.md:233 a98dda6ca4b14edba467de638bba28fc
msgid ""
"In the second example, `itemC` and `itemD` are exclusive, so only the "
"first matching item (`itemC`) is added to the command line and remaining "
"item (`itemD`) is ignored."
msgstr ""

#: ../../src/topics/inputs.md:236 10d0e9f8df8c47788703073b17529bc8
msgid "`record-job3.yml`"
msgstr ""

#: ../../src/topics/inputs.md:252 9a0e1a130fba4d24a9168ca3e455cd23
msgid ""
"In the third example, only `itemD` is provided, so it appears on the "
"command line."
msgstr ""

#: ../../src/topics/inputs.md:255 992a8c801ceb4233acf56b6bff315188
msgid "Exclusive Input Parameters with Expressions"
msgstr ""

#: ../../src/topics/inputs.md:257 9027d23fa7074b789c3b86ca5ea17fa4
msgid ""
"If you use exclusive input parameters combined with expressions, you need"
" to be aware that the `inputs` JavaScript object will contain one of the "
"exclusive input values. This means that you might need to use an **or** "
"boolean operator to check which values are present."
msgstr ""

#: ../../src/topics/inputs.md:262 68b47710a8ea4b978428b42c627944e9
msgid ""
"Let's use an example that contains an exclusive `file_format` input "
"parameter that accepts `null` (i.e. no value provided), or any value from"
" an enum."
msgstr ""

#: ../../src/topics/inputs.md:265 d33e4cac65d14111a89c838c4d1759b9
msgid "`exclusive-parameter-expressions.cwl`"
msgstr ""

#: ../../src/topics/inputs.md:271 24cea1cf7d774b6ab56959f289cab39d
msgid ""
"Note how the JavaScript expression uses the value of the exclusive input "
"parameter without taking into consideration a `null` value. If you "
"provide a valid value, such as “fasta” (one of the values of the enum), "
"your command should execute successfully:"
msgstr ""

#: ../../src/topics/inputs.md:280 b866867d6f8e4d3999b62a85e6884ebc
msgid ""
"However, if you do not provide any input value, then `file_format` will "
"be evaluated to a `null` value, which does not match the expected type "
"for the output field (a `string`), resulting in failure when running your"
" workflow."
msgstr ""

#: ../../src/topics/inputs.md:289 80c49ed168b14d25b2f09b3b0186b44f
msgid ""
"To correct it, you must remember to use an or operator in your JavaScript"
" expression when using exclusive parameters, or any parameter that allows"
" `null`. For example, the expression could be changed to "
"`$(inputs.file_format || 'auto')`, to have a default value if none was "
"provided in the command line or job input file."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:1
#: 71628ebe908b4cd28dd1fa17e3d2e2fb
msgid "Metadata and Authorship"
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:3
#: f123ca244c23413c91405a4b84887525
msgid ""
"Implementation extensions not required for correct execution (for "
"example, fields related to GUI presentation) and metadata about the tool "
"or workflow itself (for example, authorship for use in citations) may be "
"provided as additional fields on any object. Such extensions fields (e.g."
" `format: edam:format_2572`) can use a namespace prefix listed in the "
"`$namespaces` section of the document (e.g. edam: "
"http://edamontology.org/) as described in the [Schema Salad specification"
"][schema-salad]. Once you add the namespace prefix, you can access it "
"anywhere in the document as shown below. Otherwise, one must use full "
"URLs: `format: http://edamontology.org/format_2572`."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:13
#: 23299ae1bec94b00a32a8af7eeac350f
msgid ""
"For all developers, we recommend the following minimal metadata for your "
"tool and workflows. This example includes metadata allowing others to "
"cite your tool."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:16
#: 2495a9f2032a47c188338cb81ba429eb
msgid "`metadata_example2.cwl`"
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:28
#: 3fd2f3cf7bdf44089df2ce3122534801
msgid "Extended Example"
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:30
#: d5a5b8b490b640439db92da949266e4e
msgid ""
"For those that are highly motivated, it is also possible to annotate your"
" tool with a much larger amount of metadata. This example includes EDAM "
"ontology tags as keywords (allowing the grouping of related tools), hints"
" at hardware requirements in order to use the tool, and a few more "
"metadata fields."
msgstr ""

#: ../../src/topics/metadata-and-authorship.md:35
#: 5935ed94331d4b2f8ce597f31edea843
msgid "`metadata_example3.cwl`"
msgstr ""

#: ../../src/topics/operations.md:1 5feb559552194ba58da7206c601292fe
msgid "Operations"
msgstr ""

#: ../../src/topics/operations.md:3 b7124ba4df9042baadc1641ee09545d6
msgid ""
"An Operation is a type of CWL process, just like a workflow, a command-"
"line tool, or an expression tool. It is a step of a workflow that "
"specifies inputs and outputs, but it does not provide enough information "
"to be executed."
msgstr ""

#: ../../src/topics/operations.md:7 d34b698c62114041a64e0abce25ca935
msgid ""
"You can create operations to visualize a workflow during development, "
"before you are ready to submit the workflow to a CWL runner:"
msgstr ""

#: ../../src/topics/operations.md:10 cba2c31262bd450cbafc7ca77f4fb8fa
msgid "`operations.cwl`"
msgstr ""

#: ../../src/topics/operations.md:16 b01be5f632104096b5af6193aab34d90
msgid ""
"The `uppercase` step of the workflow is an operation. It can be used like"
" a command line tool or an expression. You can also plot it with the CWL "
"Viewer or `cwltool`:"
msgstr ""

#: ../../src/topics/operations.md:24 60a6a02c1367403db6df3ec10f75eb69
msgid ""
"The output of the command above can be rendered with a Graphviz renderer."
" The following image is rendered with the Sphinx Graphviz directive (this"
" user guide is built with Sphinx):"
msgstr ""

#: ../../src/topics/operations.md:55 314ea7bc35154f41b2af5fa6683ca389
msgid ""
"If you try running it with `cwltool`, the command will fail since "
"`cwltool` does not have enough information to know how to execute it:"
msgstr ""

#: ../../src/topics/operations.md:58 d81e679b13474f74bc5e1ce1e31c2bc6
msgid "`cwltool` does not know how to run operations"
msgstr ""

#: ../../src/topics/operations.md:66 d7fb27131ee44bfc82f698ee44b2bae0
msgid ""
"CWL runners may come up with ways to bind operations to concrete steps. A"
" CWL runner could, for instance, use abstract operations with ID's that "
"correspond to steps executed by a different workflow engine."
msgstr ""

#: ../../src/topics/outputs.md:1 b8ef11eafd1d46e088f1277f4ac372bc
msgid "Outputs"
msgstr ""

#: ../../src/topics/outputs.md:3 d2382ed1f644459594655d5b5b4d838a
msgid "Returning Output Files"
msgstr ""

#: ../../src/topics/outputs.md:5 6651632d977b44479b721174fffeda2d
msgid ""
"The `outputs` of a tool is a list of output parameters that should be "
"returned after running the tool.  Each parameter has an `id` for the name"
" of parameter, and `type` describing what types of values are valid for "
"that parameter."
msgstr ""

#: ../../src/topics/outputs.md:10 bee5f532554241088764ac9e56abbe85
msgid ""
"When a tool runs under CWL, the starting working directory is the "
"designated output directory.  The underlying tool or script must record "
"its results in the form of files created in the output directory.  The "
"output parameters returned by the CWL tool are either the output files "
"themselves, or come from examining the content of those files."
msgstr ""

#: ../../src/topics/outputs.md:16 0c7c506f38be421399073871f64e99b0
msgid ""
"The following example demonstrates how to return a file that has been "
"extracted from a tar file."
msgstr ""

#: ../../src/topics/outputs.md:19 8b60286e56cc42a8ab5f751a97adf771
msgid "Passing mandatory arguments to the `baseCommand`"
msgstr ""

#: ../../src/topics/outputs.md:21 fa0ad674f15348339a1eee771a6ba9e2
msgid ""
"In previous examples, the `baseCommand` was just a string, with any "
"arguments passed as CWL inputs. Instead of a single string we can use an "
"_array of strings_.  The first element is the command to run, and any "
"subsequent elements are mandatory command line arguments"
msgstr ""

#: ../../src/topics/outputs.md:26 177b5f1b95a34fb9b2eb42f733d79ac8
msgid "`tar.cwl`"
msgstr ""

#: ../../src/topics/outputs.md:32 a08a6d8aca8e490482e127a8fd5e650e
msgid "`tar-job.yml`"
msgstr ""

#: ../../src/topics/outputs.md:38 c2c60f68b1e045f88844076e191fda9b
msgid "Next, create a tar file for the example."
msgstr ""

#: ../../src/topics/outputs.md:45 6d939f62526e4e6d95acb57d72f60a84
msgid ""
"And now invoke `cwltool` with the tool description and the input object "
"on the command line:"
msgstr ""

#: ../../src/topics/outputs.md:51 c48edd9034364b81ad42540a98b51d91
msgid ""
"The field `outputBinding` describes how to set the value of each output "
"parameter."
msgstr ""

#: ../../src/topics/outputs.md:62 9ebe0186a7124dfaa30e558e8f59653a
msgid ""
"The `glob` field consists of the name of a file in the output directory. "
"If you don't know name of the file in advance, you can use a wildcard "
"pattern like `glob: '*.txt'`."
msgstr ""

#: ../../src/topics/outputs.md:65 9381b7d7c9904df0a5e16dac29c2e08f
msgid "Capturing Standard Output"
msgstr ""

#: ../../src/topics/outputs.md:67 2aa9c6916e3546b7b92fa64bb83275d1
msgid ""
"To capture a tool's standard output stream, add the `stdout` field with "
"the name of the file where the output stream should go.  Then add `type: "
"stdout` on the corresponding output parameter."
msgstr ""

#: ../../src/topics/outputs.md:71 63afb7a597fc4e459b6a7dbd40bbf6ff
msgid "`stdout.cwl`"
msgstr ""

#: ../../src/topics/outputs.md:89 7418915470f041c9af5bd39ea652de36
msgid "Array Outputs"
msgstr ""

#: ../../src/topics/outputs.md:91 f82db001b58c4969b2d8bc1dcbd7cf8a
msgid ""
"You can also capture multiple output files into an array of files using "
"`glob`."
msgstr ""

#: ../../src/topics/outputs.md:93 26d9f0b28d384617a8e490c1f8e26e52
msgid "`array-outputs.cwl`"
msgstr ""

#: ../../src/topics/outputs.md:99 cf46c971b31b4e10bf0fefb4cd028c2f
msgid "`array-outputs-job.yml`"
msgstr ""

#: ../../src/topics/outputs.md:112 a4347983fb9945a4a2773af88e426dc9
msgid ""
"As described in the [YAML Guide](yaml-guide.md#arrays), the array of "
"expected outputs is specified in `array-outputs-job.yml` with each entry "
"marked by a leading `-`. This format can also be used in CWL descriptions"
" to mark entries in arrays, as demonstrated in several of the upcoming "
"sections."
msgstr ""

#: ../../src/topics/parameter-references.md:1 c5489e0633114372b273098ee2c9ffd9
msgid "Parameter References"
msgstr ""

#: ../../src/topics/parameter-references.md:3 75de9fd63393429daf1ca10a85339aa7
msgid ""
"In a previous example, we extracted a file using the \"tar\" program. "
"However, that example was very limited because it assumed that the file "
"we were interested in was called \"hello.txt\", and this was written into"
" the `.cwl` file. This is not the best way to do this, as the "
"\"hello.txt\" filename may vary or be dependent on the input file(s) "
"used.  To avoid this we can specify the name of the file we want in the "
"job parameters file (`.yml`). In this example, you will see how to "
"reference the value of input parameters dynamically from other fields, "
"which will allow us to then specify the name of the file to extract."
msgstr ""

#: ../../src/topics/parameter-references.md:13 8b5d0ada32d645be9359f43a431f5f91
msgid "`tar-param.cwl`"
msgstr ""

#: ../../src/topics/parameter-references.md:19 2ed93dc8778e44209194f41b9ad193d5
msgid "`tar-param-job.yml`"
msgstr ""

#: ../../src/topics/parameter-references.md:25 a80dd6d9920540e9880514e04035af86
msgid ""
"Create your input files and invoke `cwltool` with the tool description "
"and the input object on the command line:"
msgstr ""

#: ../../src/topics/parameter-references.md:36 9de300f7b9da49f59d1c9fd96dec4a8b
msgid ""
"Certain fields permit parameter references which are enclosed in "
"`$(...)`. These are evaluated and replaced with value being referenced."
msgstr ""

#: ../../src/topics/parameter-references.md:47 a61f52d3c1024c3692899e05fcea4bee
msgid ""
"References are written using a subset of Javascript syntax.  In this "
"example, `$(inputs.extractfile)`, `$(inputs[\"extractfile\"])`, and "
"`$(inputs['extractfile'])` are equivalent."
msgstr ""

#: ../../src/topics/parameter-references.md:51 dafc9ba578c14fd79d075160e6b7bd6b
msgid ""
"The value of the \"inputs\" variable is the input object provided when "
"the CWL tool was invoked."
msgstr ""

#: ../../src/topics/parameter-references.md:54 28ca6cae42904559bcec98fb9d2b07cb
msgid ""
"Note that because `File` parameters are objects, to get the path to an "
"input file you must reference the path field on a file object; to "
"reference the path to the tar file in the above example you would write "
"`$(inputs.tarfile.path)`."
msgstr ""

#: ../../src/topics/parameter-references.md:59 616c9ff9fcae489285f0bbbc67f07d29
msgid "Where are parameter references allowed?"
msgstr ""

#: ../../src/topics/parameter-references.md:61 ac17acd83ddb43dc9fb7a5e595ab1153
msgid "You can only use parameter references in certain fields.  These are:"
msgstr ""

#: ../../src/topics/parameter-references.md:63 156573324cde41ee8b3c47deabf43db8
msgid ""
"From "
"[`CommandLineTool`](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineTool)"
msgstr ""

#: ../../src/topics/parameter-references.md:69 c9725be01e8a401fb3ad9ff01339f81e
msgid ""
"From "
"[CommandInputParameter](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandInputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:72 6797335256e2412cbbe7636507931455
msgid ""
"From "
"[`inputBinding`](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandLineBinding)"
msgstr ""

#: ../../src/topics/parameter-references.md:74 05a5f0fcb7454cb697e3d810d55fac26
msgid ""
"From "
"[CommandOutputParamater](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:77 406e68280b5c4ee494632f94b635b7ad
msgid ""
"From "
"[CommandOutputBinding](http://www.commonwl.org/v1.0/CommandLineTool.html#CommandOutputBinding)"
msgstr ""

#: ../../src/topics/parameter-references.md:81 2d6e2a4ff391494591bbdf8dbcc4a6ae
msgid ""
"From "
"[InputParameter](http://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[WorkflowOutputParameter](http://www.commonwl.org/v1.0/Workflow.html#WorkflowOutputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:85 e71a974b29624210a107fc2d097d4196
msgid ""
"From "
"[WorkflowStepInput](http://www.commonwl.org/v1.0/Workflow.html#WorkflowStepInput)"
msgstr ""

#: ../../src/topics/parameter-references.md:89 b59df98754e24654bfef0b1fe1d91660
msgid ""
"From "
"[InputParameter](http://www.commonwl.org/v1.0/Workflow.html#InputParameter)"
" and "
"[ExpressionToolOutputParameter](http://www.commonwl.org/v1.0/Workflow.html#ExpressionToolOutputParameter)"
msgstr ""

#: ../../src/topics/parameter-references.md:92 d2bccbff1ce646348fe38c776ad183e1
msgid ""
"From "
"[`ResourceRequirement`](http://www.commonwl.org/v1.0/CommandLineTool.html#ResourceRequirement)"
msgstr ""

#: ../../src/topics/parameter-references.md:101
#: 943ba46512ce48fe8c5b62327734c503
msgid ""
"From "
"[`InitialWorkDirRequirement`](http://www.commonwl.org/v1.0/CommandLineTool.html#InitialWorkDirRequirement)"
msgstr ""

#: ../../src/topics/parameter-references.md:103
#: bbcd43d5af7d44108aeb65075a6bd2be
msgid "in [Dirent](http://www.commonwl.org/v1.0/CommandLineTool.html#Dirent)"
msgstr ""

#: ../../src/topics/parameter-references.md:107
#: 834295755af841a78e466eea43864861
msgid ""
"From "
"[EnvironmentDef](http://www.commonwl.org/v1.0/CommandLineTool.html#EnvironmentDef)"
msgstr ""

#: ../../src/topics/requirements-and-hints.md:5
#: a6b626489bfa468e8f059ab3aa669201
msgid "Requirements and Hints"
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:1
#: e1dbea105aa845c38cb1f90b43847271
msgid "Specifying Software Requirements"
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:3
#: e9640f47d40e45bca184eb30700df648
msgid ""
"Often, tool descriptions will be written for a specific version of a "
"software. To make it easier for others to use your descriptions, you can "
"include a `SoftwareRequirement` field in the `hints` section. This may "
"also help to avoid confusion about which version of a tool the "
"description was written for."
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:13
#: 0456efb3718b4356ad2b277ee16de967
msgid ""
"In this example, the software requirement being described is InterProScan"
" version 5.21-60."
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:25
#: f7e97f926505407f8f8e9a427e055e43
msgid ""
"Depending on your CWL runner, these hints may be used to check that the "
"required software is installed and available before the job is run. To "
"enable these checks with the reference implementation, use the "
"[dependency resolvers configuration][dependencies]."
msgstr ""

#: ../../src/topics/specifying-software-requirements.md:29
#: ec597ff8f6ee47bc815b069335869f1f
msgid ""
"As well as a version number, a unique resource identifier (URI) for the "
"tool is given in the form of an [RRID][rrid]. Resources with RRIDs can be"
" looked up in the [SciCrunch][scicrunch] registry, which provides a "
"portal for finding, tracking, and referring to scientific resources "
"consistently. If you want to specify a tool as a `SoftwareRequirement`, "
"search for the tool on SciCrunch and use the RRID that it has been "
"assigned in the registry. (Follow this [Adding a Resource Tutorial"
"][scicrunch-add-tool] to add a tool to SciCrunch). You can use this RRID "
"to refer to the tool (via [identifiers.org][identifiers]) in the `specs` "
"field of your requirement description. Other good choices, in order of "
"preference, are to include the DOI for the main tool citation and the URL"
" to the tool."
msgstr ""

#: ../../src/topics/staging-input-files.md:1 7467a7f6f26a459ba4ce83e4e6dfcc2b
msgid "Staging Input Files"
msgstr ""

#: ../../src/topics/staging-input-files.md:3 3ecdf98f7e4f4f869a6dd69e3fa2d0a9
msgid ""
"Normally, input files are located in a read-only directory separate from "
"the output directory.  This causes problems if the underlying tool "
"expects to write its output files alongside the input file in the same "
"directory.  You use `InitialWorkDirRequirement` to stage input files into"
" the output directory. In this example, we use a JavaScript expression to"
" extract the base name of the input file from its leading directory path."
msgstr ""

#: ../../src/topics/staging-input-files.md:9 a03372581fa44f9b8e3e088a4099cdd9
msgid "`linkfile.cwl`"
msgstr ""

#: ../../src/topics/troubleshooting.md:1 36e082be73464be0ad5d0b681cc510da
msgid "Troubleshooting"
msgstr ""

#: ../../src/topics/troubleshooting.md:3 4464455b51ad4873ac13c4a63ee5fb54
msgid ""
"In this section you will find ways to troubleshoot when you have problems"
" executing CWL. We focus on `cwltool` here but some of these techniques "
"may apply to other CWL Runners."
msgstr ""

#: ../../src/topics/troubleshooting.md:6 ed7ff0753d1743a995f4cfedd6e5dcc2
msgid "Run `cwltool` with `cachedir`"
msgstr ""

#: ../../src/topics/troubleshooting.md:8 4c2dd10dd66446058477a52fb8d2c602
msgid ""
"You can use the `--cachedir` option when running a workflow to tell "
"`cwltool` to cache intermediate files (files that are not input nor "
"output files, but created while your workflow is running). By default, "
"these files are created in a temporary directory but writing them to a "
"separate directory makes accessing them easier."
msgstr ""

#: ../../src/topics/troubleshooting.md:14 978b6a5fd5fa425fa9a18d9f0e8788da
msgid ""
"In the following example `troubleshooting-wf1.cwl` we have two steps, "
"`step_a` and `step_b`. The workflow is equivalent to `echo \"Hello "
"World\" | rev`, which would print the message \"Hello World\" reversed, "
"i.e. \"dlroW olleH\". However, the second step, `step_b`, **has a typo**,"
" where instead of executing the `rev` command it tries to execute `revv`,"
" which fails."
msgstr ""

#: ../../src/topics/troubleshooting.md:20 000c0d6ae8bf414d9293b9f13fd2e448
msgid "`troubleshooting-wf1.cwl`"
msgstr ""

#: ../../src/topics/troubleshooting.md:27 7e91b8811be14f8e80df39ac4c5bd316
msgid ""
"Let's execute this workflow with `/tmp/cachedir/` as the `--cachedir` "
"value (`cwltool` will create the directory for you if it does not exist "
"already):"
msgstr ""

#: ../../src/topics/troubleshooting.md:35 d42799cc5bd4484bb6beb309a61e103e
msgid ""
"The workflow is in the `permanentFail` status due to `step_b` failing to "
"execute the non-existent `revv` command. The `step_a` was executed "
"successfully and its output has been cached in your `cachedir` location. "
"You can inspect the intermediate files created:"
msgstr ""

#: ../../src/topics/troubleshooting.md:44 48bb0f6666ac48648c7d969608b3bd48
msgid ""
"Each workflow step has received a unique ID (the long value that looks "
"like a hash). The `${HASH}.status` files display the status of each step "
"executed by the workflow. And the `step_a` output file `stdout.txt` is "
"visible in the output of the command above."
msgstr ""

#: ../../src/topics/troubleshooting.md:48 f8876044db184cbaaca56579d0c773df
msgid ""
"Now fix the typo so `step_b` executes `rev` (i.e. replace `revv` by `rev`"
" in the `step_b`). After fixing the typo, when you execute `cwltool` with"
" the same arguments as the previous time, note that now `cwltool` output "
"contains information about pre-cached outputs for `step_a`, and about a "
"new cache entry for the output of `step_b`. Also note that the status of "
"`step_b` is now of success."
msgstr ""

#: ../../src/topics/troubleshooting.md:59 a5a3d408dbe34cfda4dd0b2abe67e7d7
msgid ""
"In this example the workflow step `step_a` was not re-evaluated as it had"
" been cached, and there was no change in its execution or output. "
"Furthermore, `cwltool` was able to recognize when it had to re-evaluate "
"`step_b` after we fixed the executable name. This technique is useful for"
" troubleshooting your CWL documents and also as a way to prevent "
"`cwltool` to re-evaluate steps unnecessarily."
msgstr ""

#: ../../src/topics/using-containers.md:1 4c240a18c4e6441189489011242c1efd
msgid "Using Containers"
msgstr ""

#: ../../src/topics/using-containers.md:3 e37e76ef376a4ee695e600998906ec1c
msgid "Running Tools Inside Docker"
msgstr ""

#: ../../src/topics/using-containers.md:5 51a307b0ba7c4c1d89309ba8d2250471
msgid ""
"[Docker][docker] containers simplify software installation by providing a"
" complete known-good runtime for software and its dependencies.  However,"
" containers are also purposefully isolated from the host system, so in "
"order to run a tool inside a Docker container there is additional work to"
" ensure that input files are available inside the container and output "
"files can be recovered from the container.  A CWL runner can perform this"
" work automatically, allowing you to use Docker to simplify your software"
" management while avoiding the complexity of invoking and managing Docker"
" containers."
msgstr ""

#: ../../src/topics/using-containers.md:15 13cc38d72d34468fa4eb6d91f23ff105
msgid ""
"One of the responsibilities of the CWL runner is to adjust the paths of "
"input files to reflect the location where they appear inside the "
"container."
msgstr ""

#: ../../src/topics/using-containers.md:18 42a48398d3ef4b03bd7395120f2cfb42
msgid ""
"This example runs a simple Node.js script inside a Docker container which"
" will then print \"Hello World\" to the standard output."
msgstr ""

#: ../../src/topics/using-containers.md:21 d59387b433bc4ecfaf7e72026624db02
msgid "`docker.cwl`"
msgstr ""

#: ../../src/topics/using-containers.md:27 d963418ccc0b4803bbc758d718ccb5aa
msgid "`docker-job.yml`"
msgstr ""

#: ../../src/topics/using-containers.md:33 a224d1510c9e46aab23d8bdc03c349dd
msgid ""
"Before we run this, let's just break it down and see what some bits do.  "
"Most of this has been explained in previous sections, the only part that "
"is really new is the `dockerRequirement` section."
msgstr ""

#: ../../src/topics/using-containers.md:44 0a82f8a45b0546aaac4c976dcc98014a
msgid ""
"`baseCommand: node` tells CWL that we will be running this command using "
"the Node Js runtime that is meant for Javascript files. We then need to "
"specify some `hints` for how to find the container we want.  In this case"
" we list just our requirements for the docker container in "
"`DockerRequirements`.  The `dockerPull:` parameter takes the same value "
"that you would pass to a `docker pull` command. That is, the name of the "
"container image (you can even specify the tag, which is good idea for "
"best practices when using containers for reproducible research). In this "
"case we have used a container called `node:slim`."
msgstr ""

#: ../../src/topics/using-containers.md:52 bc418a2a535e49359c4cd44b373bbe02
msgid ""
"Create a Javascript file named \"hello.js\" and invoke `cwltool` "
"providing the tool description and the input object on the command line:"
msgstr ""

#: ../../src/topics/using-containers.md:55 a799fba2322944cea00e413c08066536
msgid "`hello.js`"
msgstr ""

#: ../../src/topics/using-containers.md:69 35379c6b972940bd8451f10b74dd793e
msgid ""
"Notice the CWL runner has constructed a Docker command line to run the "
"script."
msgstr ""

#: ../../src/topics/using-containers.md:72 2d5265525ad544a0b64ad2cf07aacc26
msgid ""
"In this example, the path to the script `hello.js` is "
"`/home/me/cwl/user_guide/hello.js` outside the container but "
"`/var/lib/cwl/job369354770_examples/hello.js` inside the container, as "
"reflected in the invocation of the `node` command."
msgstr ""

#: ../../src/topics/workflows.md:1 e2521b89596d42f8a87a3207fd6c32f2
msgid "Workflows"
msgstr ""

#: ../../src/topics/workflows.md:3 3676f23b63e142cb8e5715ae07216a47
msgid ""
"A workflow is a CWL processing unit that executes command-line tools, "
"expression tools, or workflows (sub-workflows) as steps. It must have "
"`inputs`, `outputs`, and `steps` defined in the CWL document."
msgstr ""

#: ../../src/topics/workflows.md:13 00725aed13a440ca8b3c4f9155fbee99
msgid "CWL workflow."
msgstr ""

#: ../../src/topics/workflows.md:41 2e38a4f9072b4ad9bbb74f943d22084d
msgid ""
"The CWL document `echo-uppercase.cwl` defines a workflow that runs the "
"command-line tool, and the expression tool showed in the earlier "
"examples."
msgstr ""

#: ../../src/topics/workflows.md:51 2b9f4035ea864b6db50c861a1819289d
msgid "`echo-uppercase.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:81 28e9064780e7418a8e02a22f92e34404
msgid ""
"A command-line tool or expression tool can also be written directly in "
"the same CWL document as the workflow. For example, we can rewrite the "
"`echo-uppercase.cwl` workflow as a single file:"
msgstr ""

#: ../../src/topics/workflows.md:91 66ce14a10d2d4dc497d3ed71e11ed8b8
msgid "`echo-uppercase-single-file.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:150 8dc00528c3d2426c8a3492a8191f1d81
msgid ""
"Having separate files helps with modularity and code organization. But it"
" can be helpful writing everything in a single file for development. "
"There are other ways to combine multiple files into a single file (e.g. "
"`cwltool --pack`) discussed further in other sections of this user guide."
msgstr ""

#: ../../src/topics/workflows.md:160 f9ef5e258f7c4971a8543d1dfed711a8
msgid ""
"For a sub-workflows you need to enable the requirement "
"`SubworkflowFeatureRequirement`. It is covered in another section of this"
" user guide in more detail."
msgstr ""

#: ../../src/topics/workflows.md:165 324bc51071d743ea80124c23880ddc0a
msgid "Writing Workflows"
msgstr ""

#: ../../src/topics/workflows.md:167 d8c13e01976b43a1af34c11a7bc36897
msgid ""
"This workflow extracts a java source file from a tar file and then "
"compiles it."
msgstr ""

#: ../../src/topics/workflows.md:170 43910a8ab4484e529a17df418b1aedbb
msgid "`1st-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:179 ../../src/topics/workflows.md:180
#: 56917e39cfa34470a7a88b52b1f955d9 eab3ac7490f24645bbf0babb20aa9df0
msgid "Visualization of 1st-workflow.cwl"
msgstr ""

#: ../../src/topics/workflows.md:180 7ad12d67e815400c94080804b9285629
msgid ""
"[![Visualization of 1st-"
"workflow.cwl](https://view.commonwl.org/graph/png/github.com/common-"
"workflow-"
"language/user_guide/blob/a29e7eae0006660946fc705a310b37a21a7e1edc/_includes/cwl/21"
"-1st-workflow/1st-"
"workflow.cwl)](https://view.commonwl.org/graph/png/github.com/common-"
"workflow-"
"language/user_guide/blob/a29e7eae0006660946fc705a310b37a21a7e1edc/_includes/cwl/21"
"-1st-workflow/1st-workflow.cwl)"
msgstr ""

#: ../../src/topics/workflows.md:183 457d5a31c79143acae2683d95d27f7a3
msgid ""
"Use a YAML or a JSON object in a separate file to describe the input of a"
" run:"
msgstr ""

#: ../../src/topics/workflows.md:185 a2a73901bf634547900d08b9a1ac8889
msgid "`1st-workflow-job.yml`"
msgstr ""

#: ../../src/topics/workflows.md:191 f347d80e62384b14acf6423675e5359a
msgid ""
"Next, create a sample Java file and add it to a tar file to use with the "
"command-line tool."
msgstr ""

#: ../../src/topics/workflows.md:205 2a845a4f3f98428fb82f3ca7ce038a6e
msgid "What's going on here?  Let's break it down:"
msgstr ""

#: ../../src/topics/workflows.md:212 e2007c74d5f449a882809d6b91c010bf
msgid ""
"The `cwlVersion` field indicates the version of the CWL spec used by the "
"document.  The `class` field indicates this document describes a "
"workflow."
msgstr ""

#: ../../src/topics/workflows.md:221 7f5e53ee7cf94be2bff45ef64db28a24
msgid ""
"The `inputs` section describes the inputs of the workflow.  This is a "
"list of input parameters where each parameter consists of an identifier "
"and a data type.  These parameters can be used as sources for input to "
"specific workflows steps."
msgstr ""

#: ../../src/topics/workflows.md:233 a0d076b7b8b048478580c99ef0c8429f
msgid ""
"The `outputs` section describes the outputs of the workflow.  This is a "
"list of output parameters where each parameter consists of an identifier "
"and a data type.  The `outputSource` connects the output parameter "
"`classfile` of the `compile` step to the workflow output parameter "
"`compiled_class`."
msgstr ""

#: ../../src/topics/workflows.md:248 7fd926c18ad548e98845e9b5134dd6f2
msgid ""
"The `steps` section describes the actual steps of the workflow.  In this "
"example, the first step extracts a file from a tar file, and the second "
"step compiles the file from the first step using the java compiler. "
"Workflow steps are not necessarily run in the order they are listed, "
"instead the order is determined by the dependencies between steps (using "
"`source`).  In addition, workflow steps which do not depend on one "
"another may run in parallel."
msgstr ""

#: ../../src/topics/workflows.md:256 789fbd47f8564cceb430ef3c0bc90e9b
msgid ""
"The first step, `untar` runs `tar-param.cwl` (described previously in "
"[Parameter References](parameter-references.md)). This tool has two input"
" parameters, `tarfile` and `extractfile` and one output parameter "
"`extracted_file`."
msgstr ""

#: ../../src/topics/workflows.md:261 45c4d0492d6143ca9cebe81e9b2cf3ae
msgid ""
"The ``in`` section of the workflow step connects these two input "
"parameters to the inputs of the workflow, `tarball` and "
"`name_of_file_to_extract` using `source`.  This means that when the "
"workflow step is executed, the values assigned to `tarball` and "
"`name_of_file_to_extract` will be used for the parameters `tarfile` and "
"`extractfile` in order to run the tool."
msgstr ""

#: ../../src/topics/workflows.md:267 73bd3da2af8545928d5ea71d0f7454f6
msgid ""
"The `out` section of the workflow step lists the output parameters that "
"are expected from the tool."
msgstr ""

#: ../../src/topics/workflows.md:278 15ce3d2700424f0fbb280d602ccebcf6
msgid ""
"The second step `compile` depends on the results from the first step by "
"connecting the input parameter `src` to the output parameter of `untar` "
"using `untar/extracted_file`.  It runs `arguments.cwl` (described "
"previously in [Additional Arguments and Parameters](additional-arguments-"
"and-parameters.md)). The output of this step `classfile` is connected to "
"the `outputs` section for the Workflow, described above."
msgstr ""

#: ../../src/topics/workflows.md:285 af4268f19202436eb0a7e8c6bed5e386
msgid "Nested Workflows"
msgstr ""

#: ../../src/topics/workflows.md:287 94a4eadca6b949d79de2990a0150eee8
msgid ""
"Workflows are ways to combine multiple tools to perform a larger "
"operations. We can also think of a workflow as being a tool itself; a CWL"
" workflow can be used as a step in another CWL workflow, if the workflow "
"engine supports the `SubworkflowFeatureRequirement`:"
msgstr ""

#: ../../src/topics/workflows.md:297 09c1619e8cbd4febbb637f7e99ad5890
msgid ""
"Here's an example workflow that uses our `1st-workflow.cwl` as a nested "
"workflow:"
msgstr ""

#: ../../src/topics/workflows.md:300 677ea7a27eb64568ab3689142d6efe70
msgid "`nestedworkflows.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:309 097e6d47f9394e62b80110700492783a
msgid ""
"This two-step workflow starts with the `create-tar` step which is "
"connected to the `compile` step in orange; `compile` is another workflow,"
" diagrammed on the right. In purple we see the fixed string "
"`\"Hello.java\"` being supplied as the `name_of_file_to_extract`."
msgstr ""

#: ../../src/topics/workflows.md:314 e93affce8c104bf6977182047c1f1077
msgid ""
"<a href=\"https://view.commonwl.org/workflows/github.com/common-workflow-"
"language/user_guide/blob/main/_includes/cwl/workflows/nestedworkflows.cwl\"><img"
" src=\"https://view.commonwl.org/graph/svg/github.com/common-workflow-"
"language/user_guide/blob/main/_includes/cwl/workflows/nestedworkflows.cwl\""
" alt=\"Visualization of nestedworkflows.cwl\" /></a> <a "
"href=\"https://view.commonwl.org/workflows/github.com/common-workflow-"
"language/user_guide/blob/main/_includes/cwl/workflows/1st-"
"workflow.cwl\"><img src=\"https://view.commonwl.org/graph/svg/github.com"
"/common-workflow-language/user_guide/blob/main/_includes/cwl/workflows"
"/1st-workflow.cwl\" alt=\"Visualization of 1st-workflow.cwl\" /></a>"
msgstr ""

#: ../../src/topics/workflows.md:322 06c9e04ba890473b851240a0fa9c3b12
msgid ""
"A CWL `Workflow` can be used as a `step` just like a `CommandLineTool`, "
"its CWL file is included with `run`. The workflow inputs (`tarball` and "
"`name_of_file_to_extract`) and outputs (`compiled_class`) then can be "
"mapped to become the step's input/outputs."
msgstr ""

#: ../../src/topics/workflows.md:336 0380dc1fe3aa48e4b62283b7b2a611d8
msgid ""
"Our `1st-workflow.cwl` was parameterized with workflow inputs, so when "
"running it we had to provide a job file to denote the tar file and "
"`*.java` filename. This is generally best-practice, as it means it can be"
" reused in multiple parent workflows, or even in multiple steps within "
"the same workflow."
msgstr ""

#: ../../src/topics/workflows.md:341 49b251f7a313492ea60504b00109e526
msgid ""
"Here we use `default:` to hard-code `\"Hello.java\"` as the "
"`name_of_file_to_extract` input, however our workflow also requires a tar"
" file at `tarball`, which we will prepare in the `create-tar` step. At "
"this point it is probably a good idea to refactor `1st-workflow.cwl` to "
"have more specific input/output names, as those also appear in its usage "
"as a tool."
msgstr ""

#: ../../src/topics/workflows.md:347 7ee55702d7dd4679a24ff052f6f0cbeb
msgid ""
"It is also possible to do a less generic approach and avoid external "
"dependencies in the job file. So in this workflow we can generate a hard-"
"coded `Hello.java` file using the previously mentioned "
"`InitialWorkDirRequirement` requirement, before adding it to a tar file."
msgstr ""

#: ../../src/topics/workflows.md:366 85d7e2e270874aa6b9f477cec0f48154
msgid ""
"In this case our step can assume `Hello.java` rather than be "
"parameterized, so we can use hardcoded values `hello.tar` and "
"`Hello.java` in a `baseCommand` and the resulting `outputs`:"
msgstr ""

#: ../../src/topics/workflows.md:383 570e94513c984c09ad6aa255f534216d
msgid ""
"Did you notice that we didn't split out the `tar --create` tool to a "
"separate file, but rather embedded it within the CWL Workflow file? This "
"is generally not best practice, as the tool then can't be reused. The "
"reason for doing it in this case is because the command line is hard-"
"coded with filenames that only make sense within this workflow."
msgstr ""

#: ../../src/topics/workflows.md:389 a107258662fb4bd4a9a3d8754e34d1e9
msgid ""
"In this example we had to prepare a tar file outside, but only because "
"our inner workflow was designed to take that as an input. A better "
"refactoring of the inner workflow would be to take a list of Java files "
"to compile, which would simplify its usage as a tool step in other "
"workflows."
msgstr ""

#: ../../src/topics/workflows.md:394 fc1a6502d831458ab8371a575cea47e2
msgid ""
"Nested workflows can be a powerful feature to generate higher-level "
"functional and reusable workflow units - but just like for creating a CWL"
" Tool description, care must be taken to improve its usability in "
"multiple workflows."
msgstr ""

#: ../../src/topics/workflows.md:398 2d10806bf1ce4e26b92adda61efc0862
msgid "Scattering Steps"
msgstr ""

#: ../../src/topics/workflows.md:400 046c5e134de94b629cc22d416f3c9182
msgid ""
"Now that we know how to write workflows, we can start utilizing the "
"`ScatterFeatureRequirement`. This feature tells the runner that you wish "
"to run a tool or workflow multiple times over a list of inputs. The "
"workflow then takes the input(s) as an array and will run the specified "
"step(s) on each element of the array as if it were a single input. This "
"allows you to run the same workflow on multiple inputs without having to "
"generate many different commands or input yaml files."
msgstr ""

#: ../../src/topics/workflows.md:411 52fa22d3277940049fbb589a3ea73433
msgid ""
"The most common reason a new user might want to use scatter is to perform"
" the same analysis on different samples. Let's start with a simple "
"workflow that calls our first example (`hello_world.cwl`) and takes an "
"array of strings as input to the workflow:"
msgstr ""

#: ../../src/topics/workflows.md:415 6043beb96c2c49648011ec556aa9e986
msgid "`scatter-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:421 5ac4310515124e2986724425bed5651f
msgid ""
"Aside from the `requirements` section including "
"`ScatterFeatureRequirement`, what is going on here?"
msgstr ""

#: ../../src/topics/workflows.md:429 7958e91d5c2f4046aa9d2070a900f9ae
msgid ""
"First of all, notice that the main workflow level input here requires an "
"array of strings."
msgstr ""

#: ../../src/topics/workflows.md:441 2db234d776fe4fd38bab07245dcb783a
msgid ""
"Here we've added a new field to the step `echo` called `scatter`. This "
"field tells the runner that we'd like to scatter over this input for this"
" particular step. Note that the input name listed after scatter is the "
"one of the step's input, not a workflow level input."
msgstr ""

#: ../../src/topics/workflows.md:445 7cfb17230e284ee7b6e2a00efe8eeb74
msgid ""
"For our first scatter, it's as simple as that! Since our tool doesn't "
"collect any outputs, we still use `outputs: []` in our workflow, but if "
"you expect that the final output of your workflow will now have multiple "
"outputs to collect, be sure to update that to an array type as well!"
msgstr ""

#: ../../src/topics/workflows.md:450 4311ac98544e4fb0b2f4b24985710a01
msgid "Using the following input file:"
msgstr ""

#: ../../src/topics/workflows.md:452 780f9c72e6c34c39918642c7e2477355
msgid "`scatter-job.yml`"
msgstr ""

#: ../../src/topics/workflows.md:458 cc4a7316db644b438cbaa181ad9ef2d3
msgid ""
"As a reminder, [`hello_world.cwl`](../introduction/quick-start.md) simply"
" calls the command `echo` on a message. If we invoke `cwltool scatter-"
"workflow.cwl scatter-job.yml` on the command line:"
msgstr ""

#: ../../src/topics/workflows.md:466 dfc461a03fe8487794837904febb8b63
msgid ""
"You can see that the workflow calls echo multiple times on each element "
"of our `message_array`. Ok, so how about if we want to scatter over two "
"steps in a workflow?"
msgstr ""

#: ../../src/topics/workflows.md:469 1e83485b00b64dfaba897bd8d772e0f0
msgid ""
"Let's perform a simple echo like above, but capturing `stdout` by adding "
"the following lines instead of `outputs: []`"
msgstr ""

#: ../../src/topics/workflows.md:472 d0321d6805ec4d3abf3877d02a0a417f
msgid "`hello_world_to_stdout.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:480 d7d77e807b3048c7bdf89558f76804cb
msgid ""
"And add a second step that uses `wc` to count the characters in each "
"file. See the tool below:"
msgstr ""

#: ../../src/topics/workflows.md:483 8d9b8be147fc4a71922dde858842e543
msgid "`wc-tool.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:489 34b7705416a745a6a42e6d402c0757ed
msgid ""
"Now, how do we incorporate scatter? Remember the scatter field is under "
"each step:"
msgstr ""

#: ../../src/topics/workflows.md:491 257adcee9da64d5c987f3b64efd20ab0
msgid "`scatter-two-steps.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:497 fa6ed5d0c14f42f4aa3c5144648db22c
msgid ""
"Here we have placed the scatter field under each step. This is fine for "
"this example since it runs quickly, but if you're running many samples "
"for a more complex workflow, you may wish to consider an alternative. "
"Here we are running scatter on each step independently, but since the "
"second step is not dependent on the first step completing all languages, "
"we aren't using the scatter functionality efficiently. The second step "
"expects an array as input from the first step, so it will wait until "
"everything in step one is finished before doing anything. Pretend that "
"`echo Hello World!` takes 1 minute to perform, `wc -c` on the output "
"takes 3 minutes and that `echo Hallo welt!` takes 5 minutes to perform, "
"and `wc` on that output takes 3 minutes. Even though `echo Hello World!` "
"could finish in 4 minutes, it will actually finish in 8 minutes because "
"the first step must wait on `echo Hallo welt!`. You can see how this "
"might not scale well."
msgstr ""

#: ../../src/topics/workflows.md:509 333e8ce458d54de394526769f96d12d2
msgid ""
"Ok, so how do we scatter on steps that can proceed independent of other "
"samples? Remember from [Nested Workflows](#nested-workflows), that we can"
" make an entire workflow a single step in another workflow! Convert our "
"two-step workflow to a single step subworkflow:"
msgstr ""

#: ../../src/topics/workflows.md:513 b819e8a5df6e4fa495924095709669ef
msgid "`scatter-nested-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:519 f1955468a1364d44a930db77c9c4b495
msgid ""
"Now the scatter acts on a single step, but that step consists of two "
"steps so each step is performed in parallel."
msgstr ""

#: ../../src/topics/workflows.md:522 8c3b9b645a204d02b2c73a205e8ec296
msgid "Conditional Workflows"
msgstr ""

#: ../../src/topics/workflows.md:524 4d88b9c186cd4502adbf752e8a70b6ce
msgid ""
"This workflow contains a conditional step and is executed based on the "
"input. This allows workflows to skip additional steps based on input "
"parameters given at the start of the program or by previous steps."
msgstr ""

#: ../../src/topics/workflows.md:527 9927673564024ba5833b5ac271737857
msgid "`conditional-workflow.cwl`"
msgstr ""

#: ../../src/topics/workflows.md:566 84f4ed7ce2004742b8db9087104a469a
msgid ""
"The first thing you'll notice is that this workflow is only compatible "
"for version 1.2 or greater of the CWL standards."
msgstr ""

#: ../../src/topics/workflows.md:573 2b5f9757adca4490a149c7f45e14fcb5
msgid ""
"The first step of the workflow (step1) contains two input properties and "
"will execute foo.cwl when the conditions are met. The new property `when`"
" is where the condition validation takes place. In this case only when "
"`in1`  from the workflow contains a value `< 1` this step will be "
"executed."
msgstr ""

#: ../../src/topics/workflows.md:587 0418de720813442f81ecff293c9448b5
msgid ""
"Using the following command `cwltool cond-wf-003.1.cwl --val 0` the value"
" will pass the first conditional step and will therefore be executed and "
"is shown in the log by `INFO [step step1] start` whereas the second step "
"is skipped as indicated by `INFO [step step2] will be skipped`."
msgstr ""

#: ../../src/topics/workflows.md:607 524eec63be8248ae982939c975ef50a2
msgid ""
"When a value of 3 is given the first conditional step will not be "
"executed but the second step will `cwltool cond-wf-003.1.cwl --val 3`."
msgstr ""

#: ../../src/topics/workflows.md:627 5e99f9912cc549a7890e2934425eb943
msgid ""
"If no conditions are met for example when using `--val 2` the workflow "
"will raise a permanentFail."
msgstr ""

#: ../../src/topics/yaml-guide.md:1 b0121ee087d6424fbb0ea5957a7b0b8c
msgid "YAML Guide"
msgstr ""

#: ../../src/topics/yaml-guide.md:6 49e9f6b3a06840289decf3f557860f87
msgid ""
"[YAML][yaml] is a file format designed to be readable by both computers "
"and humans. This guide introduces the features of YAML that are relevant "
"when writing CWL descriptions and input parameter files."
msgstr ""

#: ../../src/topics/yaml-guide.md:13 ed9eebec0b3d4b72ba65507d37757a37
msgid "You can skip this section if you are already comfortable with YAML."
msgstr ""

#: ../../src/topics/yaml-guide.md:16 bf9b255a24a84f3ba989a223492b8f41
msgid "Contents"
msgstr ""

#: ../../src/topics/yaml-guide.md:18 e79fa0b7f8b14810a3a20908ef92bc55
msgid "[Key-Value Pairs](#key-value-pairs)"
msgstr ""

#: ../../src/topics/yaml-guide.md:19 290e2035f903417cbecb5dc5f09d6ebe
msgid "[Comments](#comments)"
msgstr ""

#: ../../src/topics/yaml-guide.md:20 d420730151534f1a89076588a3358f09
msgid "[Maps](#maps)"
msgstr ""

#: ../../src/topics/yaml-guide.md:21 a6b5378bbe1e4bee9e37a765bddf75f7
msgid "[Arrays](#arrays)"
msgstr ""

#: ../../src/topics/yaml-guide.md:22 6e4d9465dc2b454d96b02d7ad1817795
msgid "[JSON Style](#json-style)"
msgstr ""

#: ../../src/topics/yaml-guide.md:24 a649d4af5f434dac9395e013ec4836bb
msgid "Key-Value Pairs"
msgstr ""

#: ../../src/topics/yaml-guide.md:26 446190a298834b73bda068286e8490cf
msgid ""
"Fundamentally, a file written in YAML consists of a set of _key-value "
"pairs_. Each pair is written as `key: value`, where whitespace after the "
"`:` is required. Key names in CWL files should not contain whitespace - "
"[_camelCase_][camelCase] is used for multi-word key names that have "
"special meaning in the CWL specification and underscored key names "
"otherwise. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:42 2f35c012ff174721bffe66a3f58a804f
msgid ""
"The YAML above defines four keys - `first_name`, `last_name`, "
"`age_years`, and `home` - with their four respective values. Values can "
"be character strings, numeric (integer, floating point, or scientific "
"representation), Boolean (`true` or `false`), or more complex nested "
"types (see below)."
msgstr ""

#: ../../src/topics/yaml-guide.md:51 43127c98c9d94aedac61cee67929c1a6
msgid ""
"Values may be wrapped in quotation marks, but be aware that this may "
"change the way that they are interpreted i.e. `\"1234\"` will be treated "
"as a character string , while `1234` will be treated as an integer. This "
"distinction can be important, for example when describing parameters to a"
" command: in CWL all parts of `baseCommand` must be strings so, if you "
"want to specify a fixed numeric value to a command, make sure that you "
"wrap that numeric value in quotes: `baseCommand: [echo, \"42\"]`."
msgstr ""

#: ../../src/topics/yaml-guide.md:61 dc4fe561203c4c38a9caea5bd6eff2cd
msgid "Comments"
msgstr ""

#: ../../src/topics/yaml-guide.md:63 f924e4896db2424d99ce8c9da14c599a
msgid ""
"You may use `#` to add comments to your CWL and parameter files. Any "
"characters to the right of ` #` will be ignored by the program "
"interpreting the YAML. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:76 bf7646f5f925485c842a6d34140e40b8
msgid ""
"If there is anything on the line before the comment, be sure to add at "
"least one space before the `#`!"
msgstr ""

#: ../../src/topics/yaml-guide.md:79 c483e61dec8949fa96bb893d422888a0
msgid "Maps"
msgstr ""

#: ../../src/topics/yaml-guide.md:81 85fcb523d0e34a499eae04d304887f7b
msgid ""
"When describing a tool or workflow with CWL, it is usually necessary to "
"construct more complex, nested representations. Referred to as _maps_, "
"these hierarchical structures are described in YAML by providing "
"additional key-value pairs as the value of any key. These pairs "
"(sometimes referred to as \"children\") are written on new lines under "
"the key to which they belong (the \"parent\"), and should be indented "
"with two spaces (⇥tab characters are not allowed). For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:104 83d47c8736a34f3cbf09e3997845e4f4
msgid ""
"The YAML above illustrates how to build up complex nested object "
"descriptions relatively quickly. The `inputs` map contains a single key, "
"`example_flag`, which itself contains two keys, `type` and "
"`inputBinding`, while one of these children, `inputBinding`, contains a "
"further two key-value pairs (`position` and `prefix`). See the "
"[Arrays](#arrays) section below for more information about providing "
"multiple values/key-value pairs for a single key. For comparison with the"
" example YAML above, here is a graphical representation of the `inputs` "
"object it describes."
msgstr ""

#: ../../src/topics/yaml-guide.md:127 c698fb3d37bc403e9aeb679b8fc0e15e
msgid "Arrays"
msgstr ""

#: ../../src/topics/yaml-guide.md:129 ae8af2f0eeda4aec97201211dfa965c7
msgid ""
"In certain circumstances, it is necessary to provide multiple values or "
"objects for a single key. As we've already seen in the [Maps](#maps) "
"section above, more than one key-value pair can be mapped to a single "
"key. However, it is also possible to define multiple values for a key "
"without having to provide a unique key for each value. We can achieve "
"this with an _array_, where each value is defined on its own line and "
"preceded by `-`. For example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:146 2ee87aa465cd41fda16a61e242f8c9d0
msgid "and a more complex example combining maps and arrays:"
msgstr ""

#: ../../src/topics/yaml-guide.md:167 0a6fd4469ff24b61b3ad001b09eead18
msgid "JSON Style"
msgstr ""

#: ../../src/topics/yaml-guide.md:169 b96ba19bce9341d39c46054e1f10fe8f
msgid ""
"YAML is based on [JavaScript Object Notation (JSON)][json]. Maps and "
"arrays can also be defined in YAML using the native JSON syntax. For "
"example:"
msgstr ""

#: ../../src/topics/yaml-guide.md:177 903f30af3d0c45cfb61063936a8097a7
msgid "and:"
msgstr ""

#: ../../src/topics/yaml-guide.md:184 ede8db7c0a58432e8a1c416e937a06d2
msgid ""
"Native JSON can be useful in indicating where a field is intentionally "
"left empty (such as `[]` for an empty array), as well as where it makes "
"more sense for the values to be located on the same line (For example, "
"when providing option flags and their values in a shell command). "
"However, as the second example above shows, it can severely affect the "
"readability of a YAML file, and should be used sparingly."
msgstr ""

#: ../../src/topics/yaml-guide.md:194 c8b53615476a4a1fbef2420d93bac94e
msgid "Reference"
msgstr ""

#: ../../src/topics/yaml-guide.md:196 ea03cb5525cc491f9feb5c4780b38fee
msgid ""
"The [Learn YAML in Y Minutes][yaml-y-mins] reference was very helpful for"
" us while we wrote this guide, though it also covers features that are "
"not valid in CWL."
msgstr ""

#: ../../src/tutorials.md:1 92fd3a5e31714eab859dd630af2e78cf
msgid "Tutorials"
msgstr ""

#: ../../src/tutorials.md:5 de660ecdb5b44c97a0e519d00b232497
msgid ""
"This is a list of tutorials provided by the CWL community. Use the `Edit "
"this page` link in the menu if you would like to add another tutorial to "
"the list."
msgstr ""

#: ../../src/tutorials.md:7 5afc1e1288e74ed0985e61e5164479c7
msgid "Beginner Tutorials"
msgstr ""

#: ../../src/tutorials.md:9 862dc7ac81e54b1fb3d4c2f961b8810e
msgid ""
"[Introduction to Workflows with Common Workflow Language: For "
"Contributors.](https://carpentries-incubator.github.io/cwl-novice-"
"tutorial/)"
msgstr ""

#: ../../src/tutorials.md:11 e2c94c0e1c7048d38cd7aa2c465a859d
msgid "Advanced Tutorials"
msgstr ""

#: ../../src/tutorials.md:13 b63253780f51467a95207d820d13ac39
msgid "[Typescript in CWL](https://github.com/umccr/cwl-ica/wiki/TypeScript)"
msgstr ""

#: ../../src/tutorials.md:15 6d06ca7ed5df4560aaed286f4fe33928
msgid "Bioinformatics Tutorials"
msgstr ""

#: ../../src/tutorials.md:17 5448df4a6a8f431d80e269bcd480e19e
msgid "[rnaseq with CWL](https://arvados.github.io/rnaseq-cwl-training/)"
msgstr ""

