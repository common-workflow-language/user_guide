# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, CWL Project Team
# This file is distributed under the same license as the Common Workflow
# Language User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Common Workflow Language User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 17:15+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../introduction/prerequisites.md:1 7bbfeec267824100866390bfcfa6cec9
msgid "Prerequisites"
msgstr ""

#: ../../introduction/prerequisites.md:6 aa8e8b6a8dfa499f99598f30dca4074f
msgid ""
"The software and configurations listed in this section are prerequisites "
"for following this user guide. The CWL standards are implemented by many "
"different workflow runners and platforms. This list of requirements "
"focuses on the CWL reference runner, `cwltool`. You can use another CWL-"
"compatible runner or workflow system, but the results and interface may "
"look different (though the exact workflow outputs should be identical)."
msgstr ""

#: ../../introduction/prerequisites.md:12 cf4757d4aef2456397017d2ff13499ba
msgid "CWL Implementations"
msgstr ""

#: ../../introduction/prerequisites.md:14 502c3afa077249b98a51051b23698a6d
msgid ""
"There are many implementations of the CWL standards. Some are complete "
"CWL runners, while others could be plug-ins or extensions to workflow "
"engines. We have a better explanation in the [Implementations](basic-"
"concepts.md#implementations) section."
msgstr ""

#: ../../introduction/prerequisites.md:19 9a788e46f9d64d30aeff30a86182884c
msgid "Operating System"
msgstr ""

#: ../../introduction/prerequisites.md:21 cc76660874a944369f69207bb1e0e856
msgid ""
"We recommend using an up-to-date operating system. You can choose any of "
"the following options for your operating system:"
msgstr ""

#: ../../introduction/prerequisites.md:24 77c62d947e894088afc8520451c79ac1
msgid "Linux"
msgstr ""

#: ../../introduction/prerequisites.md:25 32cd53abe1744596b3b33835cd8d1eb1
msgid "macOS"
msgstr ""

#: ../../introduction/prerequisites.md:26 1a7b4392aec64e3e9c053288362f342a
msgid "Windows"
msgstr ""

#: ../../introduction/prerequisites.md:29 dcea6593d35c40bc9c0d39d4a788fbc1
msgid ""
"If you are using Windows, you will have to install the [Windows Subsystem"
" for Linux 2](https://learn.microsoft.com/en-us/windows/wsl/install) "
"(WSL2). Visit the `cwltool` [documentation](https://github.com/common-"
"workflow-language/cwltool/blob/main/README.rst#ms-windows-users) for "
"details on installing WSL2. Your operating system also needs internet "
"access and a recent version of Python (3.6+)."
msgstr ""

#: ../../introduction/prerequisites.md:35 45bde9e20d0d45eb93427f5b6a3634dd
msgid "CWL Runner"
msgstr ""

#: ../../introduction/prerequisites.md:41 998f8c45ed8f4075a577d4e6af1eda5b
msgid ""
"The first thing you will need for running CWL workflows is a CWL runner. "
"`cwltool` is a Python Open Source project maintained by the CWL "
"community. It is also the CWL reference runner, which means it must "
"support everything in the current CWL specification, {{ cwl_version }}."
msgstr ""

#: ../../introduction/prerequisites.md:46 813a16e6431744b1aad3bc11a2402e44
msgid ""
"`cwltool` can be installed with `pip`. We recommend using a virtual "
"environment like `venv` or `conda`. The following commands will create "
"and activate a Python virtual environment using the `venv` module, and "
"install `cwltool` in that environment:"
msgstr ""

#: ../../introduction/prerequisites.md:51 297d141896a84499a91f312a0016547f
msgid "Installing `cwltool` with `pip` and `venv`."
msgstr ""

#: ../../introduction/prerequisites.md:62 ad7893d4a87d441c8aedbf168d3ca9ad
msgid ""
"Visit the `cwltool` [documentation](https://github.com/common-workflow-"
"language/cwltool#install) for other ways to install `cwltool` with `apt` "
"and `conda`."
msgstr ""

#: ../../introduction/prerequisites.md:65 5dbc4e8a1c544a258d5b2d965db08be2
msgid "Let's use a simple CWL tool description `true.cwl` with `cwltool`."
msgstr ""

#: ../../introduction/prerequisites.md:67 380bf05c4a754d008499fa6206e86e90
msgid "`true.cwl`"
msgstr ""

#: ../../introduction/prerequisites.md:73 6d772529b43746a9bbb7c3bd2fb033a2
msgid ""
"The `cwltool` command has an option to validate CWL tool and workflow "
"descriptions. This option will parse the CWL document, look for syntax "
"errors, and verify that the workflow descriptions are compliant with the "
"CWL standards. However, these actions will be performed without running "
"the document. To validate CWL workflows (or even a standalone command "
"line tool description like the above) pass the `--validate` option to the"
" `cwltool` command:"
msgstr ""

#: ../../introduction/prerequisites.md:79 d48c1d5aab4d4b78b610a6a8cecbac3f
msgid "Validating `true.cwl` with `cwltool`."
msgstr ""

#: ../../introduction/prerequisites.md:84 50a41a581e2045fd9fcd7149162d1b43
msgid "You can run the CWL tool description by omitting the `--validate` option:"
msgstr ""

#: ../../introduction/prerequisites.md:86 35183394d2db4b0797e6a5533cf91eed
msgid "Running `true.cwl` with `cwltool`."
msgstr ""

#: ../../introduction/prerequisites.md:91 b59575e71904478e8833c13b38d53c91
msgid "Cwl-runner Python Module"
msgstr ""

#: ../../introduction/prerequisites.md:93 c784985a2d3d4d5c9583fe8d76037a90
msgid ""
"`cwl-runner` is an implementation-agnostic alias for any CWL compliant "
"runner. This simply means that the `cwl-runner` alias command can be "
"invoked independently, and is not reliant on a particular CWL runner "
"program name. Users can invoke `cwl-runner` instead of invoking a CWL "
"runner like `cwltool` directly. The `cwl-runner` is installed by a system"
" administrator or user to point to the preferred CWL implementation. This"
" is convenient for environments with multiple CWL runners."
msgstr ""

#: ../../introduction/prerequisites.md:101 1fa903efc96d46c79a00a49b9ed778ee
msgid ""
"The CWL community publishes a Python package with the name `cwlref-"
"runner` that installs an alias for `cwltool` under the name `cwl-runner`"
msgstr ""

#: ../../introduction/prerequisites.md:104 ebecb9c15b7549c1bf82cbc381721378
msgid "Installing `cwl-runner` alias for cwltool with `pip`."
msgstr ""

#: ../../introduction/prerequisites.md:111 4290343102b746a6987d45a33fb75e8f
msgid ""
"Now you can validate and run your workflow with the `cwl-runner` "
"executable, which will invoke `cwltool`. You should have the same results"
" and output as in the previous section."
msgstr ""

#: ../../introduction/prerequisites.md:115 95dd822409aa414d848cf74a0882f12d
msgid "Validating `true.cwl` with `cwl-runner`."
msgstr ""

#: ../../introduction/prerequisites.md:120 be41ce025e294eef8015ac9ffaecd31d
msgid "Running `true.cwl` with `cwl-runner`."
msgstr ""

#: ../../introduction/prerequisites.md:125 6ff60669f1ec486e9c80cd32f2f0b8da
msgid ""
"Another way to execute `cwl-runner` is by invoking the file directly. For"
" that, the first thing you need to do is copy `true.cwl` workflow into a "
"new file: `true_shebang.cwl`, and include a special first line, a "
"*shebang*:"
msgstr ""

#: ../../introduction/prerequisites.md:129 284249ed02604c479e8a7f9ae098a936
msgid "`true_shebang.cwl`"
msgstr ""

#: ../../introduction/prerequisites.md:135 2830ba8ada494febaa3cab175aae5c96
msgid "Now you can make the file `true_shebang.cwl` executable with `chmod u+x`."
msgstr ""

#: ../../introduction/prerequisites.md:137 b4a5c084f47a4524b4bbc783481ddb80
msgid "Making `true.cwl` executable."
msgstr ""

#: ../../introduction/prerequisites.md:144 09daa94a2e764c588ed9bdf05686195c
msgid ""
"And finally, you can execute it directly in the command-line. On "
"execution, the program specified in the shebang (`cwl-runner`) will be "
"used to execute the rest of the file."
msgstr ""

#: ../../introduction/prerequisites.md:148 16b2246ddcde4bd4bab4c9b85a3245cd
msgid "Running `true_shebang.cwl` with a shebang."
msgstr ""

#: ../../introduction/prerequisites.md:154 8e5ac54df4264041a8766f683a530806
msgid ""
"The *shebang* is the two-character sequence `#!` at the beginning of a "
"script. When the script is executable, the operating system will execute "
"the script using the executable specified after the shebang. It is "
"considered a good practice to use `/usr/bin/env <executable>` rather than"
" using a hard-coded location, since `/usr/bin/env <executable>` looks for"
" the `<executable>` program in the system `PATH`,"
msgstr ""

#: ../../introduction/prerequisites.md:161 98043798d4f04488b47f65f6a3d0cbdf
msgid "Text Editor"
msgstr ""

#: ../../introduction/prerequisites.md:163 dd5138ef1899479eb6a8419834dc94d4
msgid ""
"You can use any text editor with CWL, but for syntax highlighting we "
"recommend an editor with YAML support. Popular editors are Visual Studio "
"Code, Sublime, WebStorm, vim/neovim, and Emacs."
msgstr ""

#: ../../introduction/prerequisites.md:167 2c49302420ca4ef58824a611f6e21631
msgid ""
"There are extensions for Visual Studio Code and WebStorm that provide "
"integration with CWL, and features such as customized syntax highlighting"
" and better auto-complete:"
msgstr ""

#: ../../introduction/prerequisites.md:171 121e8e64431f49159424ed4ffad079e0
msgid ""
"Visual Studio Code with the Benten (CWL) plugin - "
"<https://github.com/rabix/benten#install-vs-code-extension>"
msgstr ""

#: ../../introduction/prerequisites.md:172 786d0c2fb6c44f5c8ddb42ad714b43cc
msgid ""
"cwl-plugin for IntelliJ - <https://plugins.jetbrains.com/plugin/10040"
"-cwl-plugin>"
msgstr ""

#: ../../introduction/prerequisites.md:174 0a7322840cc64223985de5eaf3f6e5ef
msgid ""
"The CWL community also maintains a list of editors and viewers: "
"<https://www.commonwl.org/tools/#editors>"
msgstr ""

#: ../../introduction/prerequisites.md:177 adf7801f93e54841935427ad5fa76ee1
msgid "Docker"
msgstr ""

#: ../../introduction/prerequisites.md:181 2d5c42927e8347efa27e75882e59f27d
msgid ""
"`cwltool` uses Docker to run tools, workflows, and workflow steps that "
"specify a software container. Follow the instructions in the Docker "
"documentation to install it for your operating system: "
"<https://docs.docker.com/>."
msgstr ""

#: ../../introduction/prerequisites.md:185 58f717b8eb5546459d0e97cf3f4eef0a
msgid ""
"You do not need to know how to write and build Docker containers. In the "
"rest of the user guide, we will use existing Docker images for running "
"examples, and to clarify the differences between the execution models "
"with and without containers."
msgstr ""

#: ../../introduction/prerequisites.md:191 2c0ad9dee73c4e278ef0ad7f731c4931
msgid ""
"`cwltool` supports running containers with Docker, Podman, udocker, and "
"Singularity. You can also use alternative container registries for "
"pulling images."
msgstr ""

#: ../../introduction/prerequisites.md:196 a80ae1bdfdb04e1598f06d5115d624eb
msgid "Learn More"
msgstr ""

#: ../../introduction/prerequisites.md:198 baf0ff9fd9314b5884cf6f2110d964b3
msgid ""
"The [Implementations](basic-concepts.md#implementations) topic in the "
"next section, Basic Concepts."
msgstr ""

#: ../../introduction/prerequisites.md:199 958ac076e60a420b8b8d790cd49f6da8
msgid "The Python `venv` module: <https://docs.python.org/3/library/venv.html>"
msgstr ""

