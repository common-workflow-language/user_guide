# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, CWL Project Team
# This file is distributed under the same license as the Common Workflow Language User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Common Workflow Language User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-24 19:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: pt\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/introduction/basic-concepts.md:1
#: 92c85569d9e746d8a5b7a5e8f9773545
msgid "Basic Concepts"
msgstr ""

#: ../../src/introduction/basic-concepts.md:3
#: 5e501be2f49044c9897f6e8d65186abb
msgid "This section describes the basic concepts for users to get started on working with Common Workflow Language (CWL) workflows. Readers are expected to be familiar with workflow managers, YAML, and comfortable with following instructions for the command-line. The other sections of the user guide cover the same concepts, but in more detail. If you are already familiar with CWL or you are looking for more advanced content, you may want to skip this section."
msgstr ""

#: ../../src/introduction/basic-concepts.md:10
#: a6f5f188f9af4b608b8401996a558e83
msgid "The CWL Specification"
msgstr ""

#: ../../src/_includes/what-is-cwl.md:2
#: 2ecb1a3a4c7546ba94e560924cfb09a8
#: 3c0da8bd74824f8b88223c2a9dcc6ec2
msgid "CWL is a way to describe command-line tools and connect them together to create workflows. Because CWL is a specification and not a specific piece of software, tools and workflows described using CWL are portable across a variety of platforms that support the CWL standard."
msgstr ""

#: ../../src/introduction/basic-concepts.md:21
#: 7fb9ad094d844047b0d35dc70c295400
msgid "The CWL specification is a document written and maintained by the CWL community. The specification has different versions. The version covered in this user guide is the {{ cwl_version }}."
msgstr ""

#: ../../src/introduction/basic-concepts.md:25
#: 303d1a15612846c1b60a4d651f9d1d4a
msgid "The specification version can have up to three numbers separated by `.`s (dots). The first number is the major release, used for backward-incompatible changes like the removal of deprecated features. The second number is the minor release, used for new features or smaller changes that are backward-compatible. The last number is used for bug fixes, like typos and other corrections to the specification."
msgstr ""

#: ../../src/introduction/basic-concepts.md:33
#: c84c4bde07034846b043c4f281f8e00c
msgid "The model used for the specification version is called Semantic Versioning. See the end of this section to [learn more](#learn-more) about it."
msgstr ""

#: ../../src/introduction/basic-concepts.md:37
#: d774877d6e4447b7b83d56ebbaf09e96
msgid "Implementations"
msgstr ""

#: ../../src/introduction/basic-concepts.md:39
#: e8884f39f08c41bab29c4284077fd860
msgid "An implementation of the CWL specification is any software written following what is defined in a version of the specification document. However, implementations may not implement every aspect of the specification. CWL implementations are licensed under both Open Source and commercial licenses."
msgstr ""

#: ../../src/introduction/basic-concepts.md:44
#: 984ac8cee64e4e41957d8c5a4aff0cfd
msgid "CWL is well suited for describing large-scale workflows in cluster, cloud and high performance computing environments where tasks are scheduled in parallel across many nodes."
msgstr ""

#: ../../src/introduction/basic-concepts.md:51
#: 17381e8872414c49b178d91ace2e3e82
msgid "CWL specification, implementations, and other tools."
msgstr ""

#: ../../src/introduction/basic-concepts.md:105
#: c4cdbf2a42644e0eb4eb74512388e9f7
msgid "Processes and Requirements"
msgstr ""

#: ../../src/introduction/basic-concepts.md:107
#: 7d994284e320413bb8dbb2a42cd16a4e
msgid "A process is a computing unit that takes inputs and produces outputs. The behavior of a process can be affected by the inputs, requirements, and hints. There are four types of processes defined in the CWL specification {{ cwl_version }}:"
msgstr ""

#: ../../src/introduction/basic-concepts.md:112
#: ce92487ca4e3495ebd0693c502773626
msgid "A command-line tool."
msgstr ""

#: ../../src/introduction/basic-concepts.md:113
#: 0ce512c3cd744652b5feb2d8dcfdb613
msgid "An expression tool."
msgstr ""

#: ../../src/introduction/basic-concepts.md:114
#: dd7d6a1399b04923b25df70abb1becf5
msgid "An operation."
msgstr ""

#: ../../src/introduction/basic-concepts.md:115
#: ce4c76b46531416bb4006a9c01f45a23
msgid "A workflow."
msgstr ""

#: ../../src/introduction/basic-concepts.md:118
#: 0256a343321447559471d731c86d3546
msgid "The processing units available in the CWL objects model."
msgstr ""

#: ../../src/introduction/basic-concepts.md:119
#: e1235589f24942babe54adaae4f169af
msgid "A command-line tool is a wrapper for a command-line utility like `echo`, `ls`, and `tar`. A command-line tool can be called from a workflow."
msgstr ""

#: ../../src/introduction/basic-concepts.md:122
#: 81baaa297562452f80afe68657c8099d
msgid "An expression tool is a wrapper for a JavaScript expression. It can be used to simplify workflows and command-line tools, moving common parts of a workflow execution into reusable JavaScript code that takes inputs and produces outputs like a command-line tool."
msgstr ""

#: ../../src/introduction/basic-concepts.md:127
#: 0c8bbd88bd8c4c71b19011812e7487c3
msgid "Operation is an abstract process that also takes inputs, produces outputs, and can be used in a workflow. But it is a special operation not so commonly used. It is discussed in the [Operations section](../topics/operations.md) of this user guide."
msgstr ""

#: ../../src/introduction/basic-concepts.md:131
#: 3b64da1f14964cea9e5cbf8376578789
msgid "The workflow is a process that contains steps. Steps can be other workflows (nested workflows), command-line tools, or expression tools. The inputs of a workflow can be passed to any of its steps, while the outputs produced by its steps can be used in the final output of the workflow."
msgstr ""

#: ../../src/introduction/basic-concepts.md:137
#: bf33807babb64befab3385eca4c92131
msgid "The CWL specification allows for implementations to provide extra functionality and specify prerequisites to workflows through *requirements*. There are many requirements defined in the CWL specification, for instance:"
msgstr ""

#: ../../src/introduction/basic-concepts.md:141
#: afdb75d374624f4798f358a3dfe7752e
msgid "`InlineJavascriptWorkflow` - enables JavaScript in expressions."
msgstr ""

#: ../../src/introduction/basic-concepts.md:142
#: bc28744d5fa644218ef55672d726307f
msgid "`SubworkflowFeatureRequirement` - enables nested workflows."
msgstr ""

#: ../../src/introduction/basic-concepts.md:143
#: 24ffb5bfa767424585b6b6c93169de93
msgid "`InitialWorkDirRequirement` - controls staging files in the input directory."
msgstr ""

#: ../../src/introduction/basic-concepts.md:145
#: bd53afe50cc14f2ca428adddb0e60dc9
msgid "Some CWL runners may provide requirements that are not in the specification. For example, GPU requirements are supported in `cwltool` through the `cwltool:CUDARequirement` requirement, but it is not part of the {{ cwl_version }} specification and may not be supported by other CWL runners."
msgstr ""

#: ../../src/introduction/basic-concepts.md:151
#: 35c98c4b352c4f9bb9572c740894dc57
msgid "Hints are similar to requirements, but while requirements list features that are required, hints list optional features. Requirements are explained in detail in the [Requirements](../topics/requirements-and-hints.md) section."
msgstr ""

#: ../../src/introduction/basic-concepts.md:155
#: f7fb57fdf9344a7eb0f334aca8d3e85f
msgid "FAIR Workflows"
msgstr ""

#: ../../src/introduction/basic-concepts.md:157
#: 0dc6a8f19fda4e9eaa80b8e1bd1fc5be
msgid "The FAIR principles have laid a foundation for sharing and publishing digital assets, and in particular, data. The FAIR principles emphasize machine accessibility and that all digital assets should be Findable, Accessible, Interoperable, and Reusable. Workflows encode the methods by which the scientific process is conducted and via which data are created. It is thus important that workflows support the creation of FAIR data and adhere to the FAIR principles. — [FAIR Computational Workflows](https://workflows.community/groups/fair/), Workflows Community Initiative."
msgstr ""

#: ../../src/introduction/basic-concepts.md:167
#: ff1224487c35402d8afee6da3803e19b
msgid "CWL has roots in \"make\" and many similar tools that determine order of execution, based on dependencies between tasks. However, unlike \"make\", CWL tasks are isolated, and you must be explicit about your inputs and outputs."
msgstr ""

#: ../../src/introduction/basic-concepts.md:171
#: 63c2dd9aaec54df088e82febfd7bc49c
msgid "The benefit of explicitness and isolation are flexibility, portability, and scalability; tools and workflows described with CWL can transparently leverage technologies such as Docker and be used with CWL implementations from different vendors."
msgstr ""

#: ../../src/introduction/basic-concepts.md:176
#: 18f310d11c9b48b4a447b6662446cd3e
msgid "`cwltool` also uses the PROV-O standard ontology for data provenance."
msgstr ""

#: ../../src/introduction/basic-concepts.md:178
#: ../../src/introduction/prerequisites.md:196
#: ../../src/introduction/quick-start.md:94
#: a3922283fdce4f99832c816626d5f098
#: 19245373c2e84793a72462b7d2fa1c34
#: 7c3ea7150c7d41fead10ddf2a6205ec8
msgid "Learn More"
msgstr ""

#: ../../src/introduction/basic-concepts.md:180
#: cf39d3563e344ad9b31d5268c4069972
msgid "Semantic Versioning - <https://semver.org/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:181
#: 97b0113a847044b98f79b5e00941f4c3
msgid "The CWL Specification page in the CWL website: <https://www.commonwl.org/specification/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:182
#: 8cf4edbb4b344ac7b3eae86ed52beff8
msgid "The current CWL specification on GitHub: {{ '<https://github.com/common-workflow-language/cwl-{}>'.format(cwl_version_text) }}"
msgstr ""

#: ../../src/introduction/basic-concepts.md:183
#: c1dfc170fdf54c9e846539a5170f204f
msgid "The list of Implementations in the CWL website: <https://www.commonwl.org/implementations/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:184
#: 778babbcfb2648a1ad7a7ad8f80653a8
msgid "PROV-O: The PROV Ontology - <https://www.w3.org/TR/prov-o/>"
msgstr ""

#: ../../src/introduction/basic-concepts.md:185
#: 23abed59f5d44bfb96e8fa13aa213b83
msgid "CWL Operations are covered in the [Operations](../topics/operations.md) section of this user guide."
msgstr ""

#: ../../src/introduction/index.md:1
#: ee93304de4e447c1bd5626e72b99b6fe
msgid "Introduction"
msgstr ""

#: ../../src/introduction/index.md:3
#: a79f07e33fc5437c9fa204111d0290d8
msgid "This section will guide you through a short introduction to CWL, the prerequisites for following this user guide, and some basic concepts that are useful to know before reading the rest of the user guide."
msgstr ""

#: ../../src/introduction/prerequisites.md:1
#: 3cf08b553a814478b4b2c6c84ebe354e
msgid "Prerequisites"
msgstr ""

#: ../../src/introduction/prerequisites.md:6
#: 98751950a97f44fdb16e826fece810fb
msgid "The software and configurations listed in this section are prerequisites for following this user guide. The CWL standards are implemented by many different workflow runners and platforms. This list of requirements focuses on the CWL reference runner, `cwltool`. You can use another CWL-compatible runner or workflow system, but the results and interface may look different (though the exact workflow outputs should be identical)."
msgstr ""

#: ../../src/introduction/prerequisites.md:12
#: eac153b881fa47ab8bb08074dad8eed2
msgid "CWL Implementations"
msgstr ""

#: ../../src/introduction/prerequisites.md:14
#: 806ff7b185d74538a9b0e20c6ad84ffe
msgid "There are many implementations of the CWL standards. Some are complete CWL runners, while others could be plug-ins or extensions to workflow engines. We have a better explanation in the [Implementations](basic-concepts.md#implementations) section."
msgstr ""

#: ../../src/introduction/prerequisites.md:19
#: 1f9573b6cd45479bae2481a251132d53
msgid "Operating System"
msgstr ""

#: ../../src/introduction/prerequisites.md:21
#: c3995fd5588741148e3b2c91ca011ca9
msgid "We recommend using an up-to-date operating system. You can choose any of the following options for your operating system:"
msgstr ""

#: ../../src/introduction/prerequisites.md:24
#: 8a67b172ce524aa09858acd9d1a62762
msgid "Linux"
msgstr ""

#: ../../src/introduction/prerequisites.md:25
#: a567e0f952bc46be8b82d0a357f2c209
msgid "macOS"
msgstr ""

#: ../../src/introduction/prerequisites.md:26
#: 21d3bb850bb14fdcb6d4c4a15c9966b6
msgid "Windows"
msgstr ""

#: ../../src/introduction/prerequisites.md:29
#: 62cbb29459b24e9fa83c7cd7994bdf12
msgid "If you are using Windows, you will have to install the [Windows Subsystem for Linux 2](https://learn.microsoft.com/en-us/windows/wsl/install) (WSL2). Visit the `cwltool` [documentation](https://github.com/common-workflow-language/cwltool/blob/main/README.rst#ms-windows-users) for details on installing WSL2. Your operating system also needs internet access and a recent version of Python (3.6+)."
msgstr ""

#: ../../src/introduction/prerequisites.md:35
#: aaa319d4446c41ba82bf925f29f7d9dd
msgid "CWL Runner"
msgstr ""

#: ../../src/introduction/prerequisites.md:41
#: c49938a0100a4850b67d067a61304d01
msgid "The first thing you will need for running CWL workflows is a CWL runner. `cwltool` is a Python Open Source project maintained by the CWL community. It is also the CWL reference runner, which means it must support everything in the current CWL specification, {{ cwl_version }}."
msgstr ""

#: ../../src/introduction/prerequisites.md:46
#: 91e986d0c1f44d7f9c3b32366160da6a
msgid "`cwltool` can be installed with `pip`. We recommend using a virtual environment like `venv` or `conda`. The following commands will create and activate a Python virtual environment using the `venv` module, and install `cwltool` in that environment:"
msgstr ""

#: ../../src/introduction/prerequisites.md:51
#: 301c5a3baaaf46bb81bdc25b53a31f23
msgid "Installing `cwltool` with `pip` and `venv`."
msgstr ""

#: ../../src/introduction/prerequisites.md:62
#: 1664589ced314daebfb163e6424f220f
msgid "Visit the `cwltool` [documentation](https://github.com/common-workflow-language/cwltool#install) for other ways to install `cwltool` with `apt` and `conda`."
msgstr ""

#: ../../src/introduction/prerequisites.md:65
#: 1223fecd61f34ad98ebbb7e45eaf4ac7
msgid "Let's use a simple CWL tool description `true.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/prerequisites.md:67
#: 242c496599d84a64959db275ee1e212e
msgid "`true.cwl`"
msgstr ""

#: ../../src/introduction/prerequisites.md:73
#: 9b749d47f48341cb9ac8cd14098e6c47
msgid "The `cwltool` command has an option to validate CWL tool and workflow descriptions. This option will parse the CWL document, look for syntax errors, and verify that the workflow descriptions are compliant with the CWL standards. However, these actions will be performed without running the document. To validate CWL workflows (or even a standalone command line tool description like the above) pass the `--validate` option to the `cwltool` command:"
msgstr ""

#: ../../src/introduction/prerequisites.md:79
#: e8ec351d7b79447bb15f4d4518b8de87
msgid "Validating `true.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/prerequisites.md:84
#: 58d5613243914dc8bc4ce88676525783
msgid "You can run the CWL tool description by omitting the `--validate` option:"
msgstr ""

#: ../../src/introduction/prerequisites.md:86
#: 731a6c30786f43d88160f9642cbb05d2
msgid "Running `true.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/prerequisites.md:91
#: ca2088eb9565429dbc1ce0b28b2ef1fb
msgid "Cwl-runner Python Module"
msgstr ""

#: ../../src/introduction/prerequisites.md:93
#: 5ac9c6bfb50b48878aff52f1194e53c4
msgid "`cwl-runner` is an implementation-agnostic alias for any CWL compliant runner. This simply means that the `cwl-runner` alias command can be invoked independently, and is not reliant on a particular CWL runner program name. Users can invoke `cwl-runner` instead of invoking a CWL runner like `cwltool` directly. The `cwl-runner` is installed by a system administrator or user to point to the preferred CWL implementation. This is convenient for environments with multiple CWL runners."
msgstr ""

#: ../../src/introduction/prerequisites.md:101
#: b8d0c12ff07f4269bba87cd653803345
msgid "The CWL community publishes a Python package with the name `cwlref-runner` that installs an alias for `cwltool` under the name `cwl-runner`"
msgstr ""

#: ../../src/introduction/prerequisites.md:104
#: 83780c1b43f744b4ae87a917b26293f5
msgid "Installing `cwl-runner` alias for cwltool with `pip`."
msgstr ""

#: ../../src/introduction/prerequisites.md:111
#: 2919320c41e94930a0aa9bc6aacb5a87
msgid "Now you can validate and run your workflow with the `cwl-runner` executable, which will invoke `cwltool`. You should have the same results and output as in the previous section."
msgstr ""

#: ../../src/introduction/prerequisites.md:115
#: b8e799c075214d539aa0a7c04dbc33c0
msgid "Validating `true.cwl` with `cwl-runner`."
msgstr ""

#: ../../src/introduction/prerequisites.md:120
#: ccbd51a29ca841efb74c5e0a25d1eb87
msgid "Running `true.cwl` with `cwl-runner`."
msgstr ""

#: ../../src/introduction/prerequisites.md:125
#: 5f3330c1e15a402781c3325f9d3dc779
msgid "Another way to execute `cwl-runner` is by invoking the file directly. For that, the first thing you need to do is copy `true.cwl` workflow into a new file: `true_shebang.cwl`, and include a special first line, a *shebang*:"
msgstr ""

#: ../../src/introduction/prerequisites.md:129
#: 314fbc9f866a405b86e7bd704781dea1
msgid "`true_shebang.cwl`"
msgstr ""

#: ../../src/introduction/prerequisites.md:135
#: 9434e3680aa9487fab9ddb782c6ff3d0
msgid "Now you can make the file `true_shebang.cwl` executable with `chmod u+x`."
msgstr ""

#: ../../src/introduction/prerequisites.md:137
#: 2ce0bda38d814b248a2c23ebc26bf462
msgid "Making `true.cwl` executable."
msgstr ""

#: ../../src/introduction/prerequisites.md:144
#: 105c3be6f5f34f4388b9999603275bb5
msgid "And finally, you can execute it directly in the command-line. On execution, the program specified in the shebang (`cwl-runner`) will be used to execute the rest of the file."
msgstr ""

#: ../../src/introduction/prerequisites.md:148
#: bd378c8483a14c93b5fe00d76e5b0a06
msgid "Running `true_shebang.cwl` with a shebang."
msgstr ""

#: ../../src/introduction/prerequisites.md:154
#: 5ace5416560247c7a3304c41caa000c6
msgid "The *shebang* is the two-character sequence `#!` at the beginning of a script. When the script is executable, the operating system will execute the script using the executable specified after the shebang. It is considered a good practice to use `/usr/bin/env <executable>` rather than using a hard-coded location, since `/usr/bin/env <executable>` looks for the `<executable>` program in the system `PATH`,"
msgstr ""

#: ../../src/introduction/prerequisites.md:161
#: 5d7a175b3c5a4f888daf037672211d61
msgid "Text Editor"
msgstr ""

#: ../../src/introduction/prerequisites.md:163
#: 4e0c0c345527412eaf70e8efe67fab8f
msgid "You can use any text editor with CWL, but for syntax highlighting we recommend an editor with YAML support. Popular editors are Visual Studio Code, Sublime, WebStorm, vim/neovim, and Emacs."
msgstr ""

#: ../../src/introduction/prerequisites.md:167
#: 6dd8379682824d1397c48ac10db4b894
msgid "There are extensions for Visual Studio Code and WebStorm that provide integration with CWL, and features such as customized syntax highlighting and better auto-complete:"
msgstr ""

#: ../../src/introduction/prerequisites.md:171
#: 57691f7bd87741d68f4e1a963da91654
msgid "Visual Studio Code with the Benten (CWL) plugin - <https://github.com/rabix/benten#install-vs-code-extension>"
msgstr ""

#: ../../src/introduction/prerequisites.md:172
#: 13a4d71f127b4bd09c12a37752d27c8b
msgid "cwl-plugin for IntelliJ - <https://plugins.jetbrains.com/plugin/10040-cwl-plugin>"
msgstr ""

#: ../../src/introduction/prerequisites.md:174
#: a574ed30000541b2816fbfe66b32c314
msgid "The CWL community also maintains a list of editors and viewers: <https://www.commonwl.org/tools/#editors>"
msgstr ""

#: ../../src/introduction/prerequisites.md:177
#: 9bb9c9052ad14c7c9fc0275c8f1b651b
msgid "Docker"
msgstr ""

#: ../../src/introduction/prerequisites.md:181
#: 5afcf2e79ceb424ea0a570797a712321
msgid "`cwltool` uses Docker to run tools, workflows, and workflow steps that specify a software container. Follow the instructions in the Docker documentation to install it for your operating system: <https://docs.docker.com/>."
msgstr ""

#: ../../src/introduction/prerequisites.md:185
#: cc5b91b8c5b14a40bdd09d3bd45fe9bb
msgid "You do not need to know how to write and build Docker containers. In the rest of the user guide, we will use existing Docker images for running examples, and to clarify the differences between the execution models with and without containers."
msgstr ""

#: ../../src/introduction/prerequisites.md:191
#: d5e36c7827334fc69498459db5137d30
msgid "`cwltool` supports running containers with Docker, Podman, udocker, and Singularity. You can also use alternative container registries for pulling images."
msgstr ""

#: ../../src/introduction/prerequisites.md:198
#: 39d3eff64d004a0f8257d61f2a90b186
msgid "The [Implementations](basic-concepts.md#implementations) topic in the next section, Basic Concepts."
msgstr ""

#: ../../src/introduction/prerequisites.md:199
#: 19946d0d9a6f42d487537273225b91cd
msgid "The Python `venv` module: <https://docs.python.org/3/library/venv.html>"
msgstr ""

#: ../../src/introduction/quick-start.md:1
#: 66048204601a439d8245455c48b08826
msgid "Quick Start"
msgstr ""

#: ../../src/introduction/quick-start.md:3
#: dcc41d0ce48e42a0ba209ca1fa37220a
msgid "This section will show you a brief overview of what CWL is, and where you can learn more about it. No previous knowledge of CWL is required, but you must be comfortable following instructions for the command-line."
msgstr ""

#: ../../src/introduction/quick-start.md:7
#: e2ebe32f12b74608b35217cea30cd0e0
msgid "“Hello World”"
msgstr ""

#: ../../src/introduction/quick-start.md:12
#: 37a4f461b82f4e48948c5eab400b14a5
msgid "CWL documents are written in [YAML](../topics/index.md) (and/or JSON). The example below shows a simple CWL “Hello World” workflow annotated with comments. Note that comments start with `#`:"
msgstr ""

#: ../../src/introduction/quick-start.md:16
#: 371c6801e92448f9875fff60a509f509
msgid "`hello_world.cwl`"
msgstr ""

#: ../../src/introduction/quick-start.md:22
#: e3fb51cd196542008cb16458fdef7c1f
msgid "The example above is just a wrapper for the `echo` command-line tool. Running the workflow above with the default input values will produce the same result as the command-line `echo \"Hello World\"`."
msgstr ""

#: ../../src/introduction/quick-start.md:27
#: d00cd96d47c6450a8c0955765eff9ac1
msgid "In CWL, there is a distinction between a command-line tool and a workflow. But for the sake of simplicity, we are using the term “workflow” here. You will learn more about this in the [basic concepts](basic-concepts.md) section."
msgstr ""

#: ../../src/introduction/quick-start.md:32
#: e06fdf0744344d0193b99791b9b94c7d
msgid "Installing a CWL Runner"
msgstr ""

#: ../../src/introduction/quick-start.md:34
#: 6e2191fbb8794f83a51897028a2e50f7
msgid "`cwltool` is an implementation of the CWL specification. It is also the CWL *Reference Runner* for the specification, and it is compliant with the latest version of the specification: {{ cwl_version }}. You can install `cwltool` using `pip`:"
msgstr ""

#: ../../src/introduction/quick-start.md:39
#: 931b6b49a46d4d5581a05446ac2e9a7d
msgid "Installing `cwltool` with `pip`."
msgstr ""

#: ../../src/introduction/quick-start.md:47
#: 5cb281f4d0ea4163af0f7203c150345e
msgid "If installing the cwltool using the pip command doesn't work for you, the [prerequisites](prerequisites.md) section contains other ways to install `cwltool` and a more detailed list of software and libraries used for following the rest of this user guide."
msgstr ""

#: ../../src/introduction/quick-start.md:51
#: 4e6c4c2b6bae49a2b2d93bc95538c7b9
msgid "Running \"Hello World\""
msgstr ""

#: ../../src/introduction/quick-start.md:53
#: b37ba76e0dd940559e13543ea241376e
msgid "The usage of the `cwltool` command-line executable is basically `cwltool [OPTIONS] <CWL_DOCUMENT> [INPUTS_OBJECT]`. You can run the `hello_world.cwl` workflow without specifying any option:"
msgstr ""

#: ../../src/introduction/quick-start.md:57
#: 22d7ac26f2ca41b2aa141fd4774b6f5c
msgid "Running `hello_world.cwl` with `cwltool`."
msgstr ""

#: ../../src/introduction/quick-start.md:62
#: 15033ad0574d46b2951bb2121c80c462
msgid "Or you can override the default value of the input parameter `message`, similar to how you would change the argument of the `echo` base command:"
msgstr ""

#: ../../src/introduction/quick-start.md:65
#: 2b2fc79461674b9ebdef49750f7fb319
msgid "Running `hello_world.cwl` with `cwltool` passing an input parameter."
msgstr ""

#: ../../src/introduction/quick-start.md:70
#: 8b11c9920b97427aa2d29498664e24bb
msgid "Another way of passing values to your workflow input parameters is via an *Inputs Object*. This is a file containing the input fields with their corresponding values. The Inputs Objects file can be written in JSON or YAML. For example:"
msgstr ""

#: ../../src/introduction/quick-start.md:74
#: d11de6ee015f46c991fbc8b48cd1fb60
msgid "`hello_world-job.json`"
msgstr ""

#: ../../src/introduction/quick-start.md:80
#: 71adfebd042a4820ac533a2e6e07c0ca
msgid "You can use this Inputs Object file now to execute the “Hello World” workflow:"
msgstr ""

#: ../../src/introduction/quick-start.md:82
#: 8f199e6778a84ba68d385b42169f6b26
msgid "Passing an Inputs Object file to `cwltool`."
msgstr ""

#: ../../src/introduction/quick-start.md:88
#: 28ec66afdad24dfd871ef1a2686f9976
msgid "We used a similar file name for the workflow and for the Inputs Object files. The *-job.json* suffix is very common in Inputs Object files, but it is not a requirement. You can choose any name for your workflows and Inputs Object files."
msgstr ""

#: ../../src/introduction/quick-start.md:96
#: cccb84844ce0453cb77ce3db65ffbc1b
msgid "Continue reading the next sections of this User Guide!"
msgstr ""

#: ../../src/introduction/quick-start.md:97
#: 0c5a431846f241829975552ef8dd9c32
msgid "[List of CWL Implementations](https://www.commonwl.org/implementations)."
msgstr ""

#: ../../src/introduction/quick-start.md:98
#: 8e383a7ea5b54c56adb9cb0c6ed6c179
msgid "The [`common-workflow-language` organization](https://github.com/common-workflow-language) at GitHub."
msgstr ""

#: ../../src/introduction/quick-start.md:99
#: 98473d00529345d4989f0f5d2101da1b
msgid "[Common Workflow Language at Wikipedia](https://en.wikipedia.org/wiki/Common_Workflow_Language)."
msgstr ""

#: ../../src/introduction/quick-start.md:100
#: d105326cb76b455d907c283a509f038c
msgid "[YAML.org](http://yaml.org/) and [YAML at Wikipedia](https://en.wikipedia.org/wiki/YAML)."
msgstr ""

#: ../../src/introduction/quick-start.md:101
#: d4d00a573e36474f9c915563d4ea8709
msgid "The {{'[CWL Specification VERSION](https://www.commonwl.org/VERSION)'.replace('VERSION', cwl_version_text) }}."
msgstr ""

#: ../../src/introduction/quick-start.md:102
#: aa8195d109974f9da3b9da97479525cb
msgid "[Workflow management system at Wikipedia](https://en.wikipedia.org/wiki/Workflow_management_system)."
msgstr ""
